!function e(t,n,i){function r(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(l)return l(a,!0);var o=new Error("Cannot find module '"+a+"'");throw o.code="MODULE_NOT_FOUND",o}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return r(n||e)},c,c.exports,e,t,n,i)}return n[a].exports}for(var l="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={el:document.createElement("div"),dispatch:function(e,t){var n=new CustomEvent(e,{detail:t||{}});this.el.dispatchEvent(n)},listen:function(e,t,n){this.el.addEventListener(e,t.bind(n))}}},{}],2:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}var r=i(e("./slider/slider")),l=i(e("./sort/sort"));new r.default(document.querySelector(".new-bikes__container")).loadContent(),new l.default(document.querySelector("section.bestsellers")).loadContent("./api/bestsellers.json"),new l.default(document.querySelector("section.all-bikes")).loadContent("./api/all-modeles.json")},{"./slider/slider":5,"./sort/sort":7}],3:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=i(e("../core/BUS")),s=i(e("../templates/bullet-template")),u=function(){function e(t,n){r(this,e),this.index=t,this.data=n}return l(e,[{key:"createHTML",value:function(){var e=this;return this.el=s.default.render({index:this.index}),this.el.addEventListener("click",function(t){return e.clicked(t)}),this.el}},{key:"clicked",value:function(e){e.preventDefault(),a.default.dispatch("bullet:clicked",{el:this.el,index:this.index})}}]),e}();n.default=u},{"../core/BUS":1,"../templates/bullet-template":9}],4:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(e){return e&&e.__esModule?e:{default:e}}(e("../templates/slide-template")),a=function(){function e(t,n){i(this,e),this.index=t,this.data=n}return r(e,[{key:"createHTML",value:function(){return this.el=l.default.render(Object.assign({index:this.index},this.data)),this.el}}]),e}();n.default=a},{"../templates/slide-template":10}],5:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=i(e("../core/BUS")),s=i(e("./slider-item")),u=i(e("./bullet")),o=function(){function e(t){r(this,e),this.el=t,this.slides=[],this.currentIndex=0,this.init()}return l(e,[{key:"init",value:function(){this.previewUl=this.el.querySelector(".preview__ul"),this.itemUl=this.el.querySelector(".new-bikes__ul"),this.left=this.el.querySelector(".new-bikes__arrows--previous"),this.right=this.el.querySelector(".new-bikes__arrows--next"),this.listen()}},{key:"loadContent",value:function(){var e=this,t=new XMLHttpRequest;t.open("GET","./api/slides.json",!0),t.addEventListener("readystatechange",function(){return e.loaded(t)}),t.send()}},{key:"loaded",value:function(e){e.readyState==XMLHttpRequest.DONE&&200==e.status&&this.createHTMLStructure(JSON.parse(e.responseText))}},{key:"listen",value:function(){var e=this;this.left.addEventListener("click",function(){return e.clicked(-1)}),this.right.addEventListener("click",function(){return e.clicked(1)}),a.default.listen("bullet:clicked",this.clicked,this)}},{key:"clicked",value:function(e){var t=this,n=new TimelineMax,i=this.slides[this.currentIndex].el,r=i.querySelector("img"),l=i.querySelector(".bike__description"),a=(this.currentIndex+e+this.slides.length)%this.slides.length,s=e;if(e instanceof Event&&(a=e.detail.index,s=this.currentIndex<a?1:-1),this.currentIndex!==a){var u=this.slides[a].el,o=u.querySelector("img"),c=u.querySelector(".bike__description");TweenMax.isTweening(r)||(n.set(".bike__image",{backfaceVisibility:"hidden"}),n.to(r,.6,{rotationY:90*s,z:300,ease:Back.easeIn.config(1.7),onComplete:function(){u.querySelector(".new-bikes__bike").classList.remove("new-bikes__bike--hidden"),i.querySelector(".new-bikes__bike").classList.add("new-bikes__bike--hidden"),t.previewUl.querySelector(".preview__image--active").classList.remove("preview__image--active"),t.previewUl.querySelectorAll(".preview__image")[a].classList.add("preview__image--active")}}),n.to(l,.6,{opacity:0,scaleX:.5,scaleY:.5,ease:Back.easeIn.config(1.7)},"-=0.6"),n.set(o,{rotationY:-90*s,z:300},.5),n.set(c,{opacity:0,scaleX:.5,scaleY:.5},.5),n.to(o,.6,{rotationY:0,z:0,ease:Back.easeOut.config(1.7),onComplete:function(){r.style.transform=null,t.currentIndex=a}}),n.to(c,.6,{opacity:1,scaleX:1,scaleY:1,ease:Back.easeOut.config(1.7)},"-=0.6"),n.play())}}},{key:"createHTMLStructure",value:function(e){var t=this;e.forEach(function(e,n){t.slides[n]=new s.default(n,e),t.itemUl.appendChild(t.slides[n].createHTML());var i=new u.default(n,e);t.previewUl.appendChild(i.createHTML())})}}]),e}();n.default=o},{"../core/BUS":1,"./bullet":3,"./slider-item":4}],6:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(e){return e&&e.__esModule?e:{default:e}}(e("../templates/bike-template")),a=function(){function e(t,n){i(this,e),this.index=t,this.data=n}return r(e,[{key:"createHTML",value:function(){var e=this;return this.el=l.default.render(this.data),this.el.addEventListener("mouseenter",function(t){return e.move(t)}),this.el.addEventListener("mouseleave",function(t){return e.reset(t)}),this.el}},{key:"move",value:function(e){TweenMax.to(this.el,.4,{scaleX:1.15,scaleY:1.15})}},{key:"reset",value:function(e){TweenMax.to(this.el,.4,{scaleX:1,scaleY:1})}}]),e}();n.default=a},{"../templates/bike-template":8}],7:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(e){return e&&e.__esModule?e:{default:e}}(e("./bike")),a=function(){function e(t){i(this,e),this.el=t,this.bikes=[],this.el.querySelector(".bestseller__search")&&(this.searchInput=this.el.querySelector(".bestseller__search"))}return r(e,[{key:"loadContent",value:function(e){var t=this,n=new XMLHttpRequest;n.open("GET",e,!0),n.addEventListener("readystatechange",function(){return t.loaded(n)}),n.send()}},{key:"loaded",value:function(e){e.readyState==XMLHttpRequest.DONE&&200==e.status&&this.createHTMLStructure(JSON.parse(e.responseText))}},{key:"createHTMLStructure",value:function(e){var t=this;e.forEach(function(e,n){var i=new l.default(n,e);t.bikes.push(i),t.el.querySelector("ul.bestsellers-list").appendChild(i.createHTML())}),this.listen()}},{key:"listen",value:function(){var e=this;this.el.querySelector("form.bestsellers__form select").addEventListener("change",function(){return e.selectChanged()}),this.searchInput&&this.searchInput.addEventListener("input",function(){return e.searchChanged()})}},{key:"searchChanged",value:function(){var e=this,t=this.el.querySelector("ul.bestsellers-list");TweenMax.to(t,.5,{alpha:0,onComplete:function(){t.innerHTML=null,e.bikes.forEach(function(n){n.el.innerHTML.toLowerCase().indexOf(e.searchInput.value.toLowerCase())>-1&&t.appendChild(n.el)}),TweenMax.to(t,.5,{alpha:1})}})}},{key:"selectChanged",value:function(){var e=this.el.querySelector("ul.bestsellers-list"),t="data-"+this.el.querySelector("form.bestsellers__form select").value,n=[].slice.call(this.el.querySelectorAll(".bestsellers-list__li"));n.sort(function(e,n){return e.getAttribute(t)>n.getAttribute(t)?1:-1}),TweenMax.to(e,.5,{alpha:0,onComplete:function(){e.innerHTML=null,n.forEach(function(t){e.appendChild(t)}),TweenMax.to(e,.5,{alpha:1})}})}}]),e}();n.default=a},{"./bike":6}],8:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(){function e(){i(this,e)}return r(e,null,[{key:"render",value:function(e){var t='\n            <li class="bestsellers-list__li" data-price="'+e.price+'" data-name="'+e.title+'" '+("stock"in e?'data-stock="'+e.stock+'"':null)+" "+("popularity"in e?'data-popularity="'+e.popularity+'"':null)+'>\n                <article class="bestseller '+(e.stock<3?"bestseller--danger":"")+'">\n                    <a href="#">\n                        <div class="bestseller__image">\n                            <img src="'+e.image+'" alt="Image de vélo">\n                        </div> \n                        <h1 class="bestseller__title">'+e.title+'</h1>\n                        <p class="bestseller__description">'+e.description+'</p>\n                        <div class="bestseller-footer">\n                            <p class="bestseller-footer__stock">'+e.stock+' en stock</p>\n                            <div class="bestseller-footer__bar"></div>\n                        </div>\n                    </a>\n                </article>\n            </li>\n        ',n=document.createElement("div");return n.innerHTML=t,n.childNodes[1]}}]),e}();n.default=l},{}],9:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(){function e(){i(this,e)}return r(e,null,[{key:"render",value:function(e){var t='\n            <li class="preview__li">\n                <a href="#">\n                    <div class="preview__image '+(0===e.index?"preview__image--active":null)+" preview__image--image-"+(e.index+1)+'"></div>\n                </a>\n            </li>\n        ',n=document.createElement("div");return n.innerHTML=t,n.childNodes[1]}}]),e}();n.default=l},{}],10:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(){function e(){i(this,e)}return r(e,null,[{key:"render",value:function(e){var t='\n            <li>\n                <article class="new-bikes__bike'+(0==e.index?"":" new-bikes__bike--hidden")+'">\n                    <div class="bike__image bike__image--preview'+(e.index+1)+'">\n                        <img src="'+e.image+'" alt="Image d\'une selle de vélo">\n                    </div>\n                    <div class="bike__description">\n                        <h1 class="bike__title">'+e.title+'</h1>\n                        <p class="bike__text">'+e.description+'</p>\n                        <a href="'+e.url+'" class="btn bike__btn">commander <span class="caret caret-right bike__caret"></span></a>\n                    </div>\n                </article>\n            </li>\n        ',n=document.createElement("div");return n.innerHTML=t,n.childNodes[1]}}]),e}();n.default=l},{}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZGVmYXVsdCIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZGlzcGF0Y2giLCJkYXRhcyIsImV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJ0aGlzIiwiZGlzcGF0Y2hFdmVudCIsImxpc3RlbiIsIm1ldGhvZCIsInNjb3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYmluZCIsIjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsIl9zbGlkZXIyIiwiX3NvcnQyIiwicXVlcnlTZWxlY3RvciIsImxvYWRDb250ZW50IiwiLi9zbGlkZXIvc2xpZGVyIiwiLi9zb3J0L3NvcnQiLCIzIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfQlVTMiIsIl9idWxsZXRUZW1wbGF0ZTIiLCJCdWxsZXQiLCJpbmRleCIsImRhdGEiLCJfdGhpcyIsInJlbmRlciIsImNsaWNrZWQiLCJwcmV2ZW50RGVmYXVsdCIsIi4uL2NvcmUvQlVTIiwiLi4vdGVtcGxhdGVzL2J1bGxldC10ZW1wbGF0ZSIsIjQiLCJfc2xpZGVUZW1wbGF0ZTIiLCJTbGlkZXJJdGVtIiwiYXNzaWduIiwiLi4vdGVtcGxhdGVzL3NsaWRlLXRlbXBsYXRlIiwiNSIsIl9zbGlkZXJJdGVtMiIsIl9idWxsZXQyIiwiU2xpZGVyIiwic2xpZGVzIiwiY3VycmVudEluZGV4IiwiaW5pdCIsInByZXZpZXdVbCIsIml0ZW1VbCIsImxlZnQiLCJyaWdodCIsInJlcSIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsImxvYWRlZCIsInNlbmQiLCJyZWFkeVN0YXRlIiwiRE9ORSIsInN0YXR1cyIsImNyZWF0ZUhUTUxTdHJ1Y3R1cmUiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJfdGhpczIiLCJkaXJlY3Rpb24iLCJfdGhpczMiLCJzZXF1ZW5jZSIsIlRpbWVsaW5lTWF4Iiwic2xpZGVFbCIsImltYWdlIiwiZGVzY3JpcHRpb24iLCJuZXh0IiwiZCIsIkV2ZW50IiwibmV4dFNsaWRlIiwiaW1hZ2VOZXh0IiwiZGVzY3JpcHRpb25OZXh0IiwiVHdlZW5NYXgiLCJpc1R3ZWVuaW5nIiwic2V0IiwiYmFja2ZhY2VWaXNpYmlsaXR5IiwidG8iLCJyb3RhdGlvblkiLCJ6IiwiZWFzZSIsIkJhY2siLCJlYXNlSW4iLCJjb25maWciLCJvbkNvbXBsZXRlIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwicXVlcnlTZWxlY3RvckFsbCIsIm9wYWNpdHkiLCJzY2FsZVgiLCJzY2FsZVkiLCJlYXNlT3V0Iiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJwbGF5IiwiX3RoaXM0IiwiZm9yRWFjaCIsImVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUhUTUwiLCJidWxsZXQiLCIuL2J1bGxldCIsIi4vc2xpZGVyLWl0ZW0iLCI2IiwiX2Jpa2VUZW1wbGF0ZTIiLCJCaWtlIiwibW92ZSIsInJlc2V0IiwiLi4vdGVtcGxhdGVzL2Jpa2UtdGVtcGxhdGUiLCI3IiwiX2Jpa2UyIiwiU29ydCIsImJpa2VzIiwic2VhcmNoSW5wdXQiLCJ1cmwiLCJiaWtlIiwicHVzaCIsInNlbGVjdENoYW5nZWQiLCJzZWFyY2hDaGFuZ2VkIiwibGlzdCIsImFscGhhIiwiaW5uZXJIVE1MIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwic29ydGVyIiwic2xpY2UiLCJzb3J0IiwiYiIsImdldEF0dHJpYnV0ZSIsIi4vYmlrZSIsIjgiLCJCaWtlVGVtcGxhdGUiLCJodG1sIiwicHJpY2UiLCJ0aXRsZSIsInN0b2NrIiwicG9wdWxhcml0eSIsInRlbXBsYXRlIiwiY2hpbGROb2RlcyIsIjkiLCJCdWxsZXRUZW1wbGF0ZSIsIjEwIiwiU2xpZGVyVGVtcGxhdGUiXSwibWFwcGluZ3MiOiJDQUFBLFNBQVVBLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsU0FBU0MsRUFBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLElBQUlFLEVBQWtCLG1CQUFUQyxTQUFxQkEsUUFBUSxJQUFJRixHQUFHQyxFQUFFLE9BQU9BLEVBQUVGLEdBQUUsR0FBSSxHQUFHSSxFQUFFLE9BQU9BLEVBQUVKLEdBQUUsR0FBSSxJQUFJSyxFQUFFLElBQUlDLE1BQU0sdUJBQXVCTixFQUFFLEtBQUssTUFBTUssRUFBRUUsS0FBSyxtQkFBbUJGLEVBQUUsSUFBSUcsRUFBRVgsRUFBRUcsSUFBSVMsWUFBWWIsRUFBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxRQUFRLFNBQVNkLEdBQUcsSUFBSUUsRUFBRUQsRUFBRUksR0FBRyxHQUFHTCxHQUFHLE9BQU9JLEVBQUVGLEdBQUlGLElBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsT0FBT0QsRUFBRUcsR0FBR1MsUUFBa0QsSUFBSSxJQUExQ0wsRUFBa0IsbUJBQVRELFNBQXFCQSxRQUFnQkgsRUFBRSxFQUFFQSxFQUFFRixFQUFFYSxPQUFPWCxJQUFJRCxFQUFFRCxFQUFFRSxJQUFJLE9BQU9ELEVBQXZiLEVBQTRiYSxHQUFHLFNBQVNULEVBQVFVLEVBQU9KLEdBQ3ZkLGFBRUFLLE9BQU9DLGVBQWVOLEVBQVMsY0FDM0JPLE9BQU8sSUFFWFAsRUFBUVEsU0FDSkMsR0FBSUMsU0FBU0MsY0FBYyxPQUUz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QUFXRyxVQUFXLEdBQU16QyxPQUFPQyxlQUFlbUMsRUFBUUUsRUFBV0ksSUFBS0osSUFBaUIsT0FBTyxTQUFVTixFQUFhVyxFQUFZQyxHQUFpSixPQUE5SEQsR0FBWVIsRUFBaUJILEVBQVlhLFVBQVdGLEdBQWlCQyxHQUFhVCxFQUFpQkgsRUFBYVksR0FBcUJaLEdBQTdnQixHQUlmeUksRUFBaUIsV0FDakIsU0FBU0EsSUFDTDNJLEVBQWdCbEIsS0FBTTZKLEdBYzFCLE9BWEF2SSxFQUFhdUksRUFBZ0IsT0FDekIvSCxJQUFLLFNBQ0x4QyxNQUFPLFNBQWdCZ0QsR0FDbkIsSUFBSTZHLEVBQU8sdUVBQXVGLEdBQWQ3RyxFQUFLRCxNQUFhLEdBQUssNEJBQThCLHdFQUEwRUMsRUFBS0QsTUFBUSxHQUFLLHlDQUEyQ0MsRUFBS3lDLE1BQVEseUtBQThLekMsRUFBSytHLE1BQVEsd0RBQTBEL0csRUFBSzBDLFlBQWMsMENBQTRDMUMsRUFBSzJGLElBQU0saUxBRXhsQnVCLEVBQVcvSixTQUFTQyxjQUFjLE9BRXRDLE9BREE4SixFQUFTaEIsVUFBWVcsRUFDZEssRUFBU0MsV0FBVyxPQUk1QkksRUFoQlUsR0FtQnJCOUssRUFBUVEsUUFBVXNLLFlBRVAiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgZWw6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuXG4gICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKGUsIGRhdGFzKSB7XG4gICAgICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudChlLCB7IGRldGFpbDogZGF0YXMgfHwge30gfSk7XG4gICAgICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfSxcblxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGUsIG1ldGhvZCwgc2NvcCkge1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoZSwgbWV0aG9kLmJpbmQoc2NvcCkpO1xuICAgIH1cbn07XG5cbn0se31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWRlciA9IHJlcXVpcmUoJy4vc2xpZGVyL3NsaWRlcicpO1xuXG52YXIgX3NsaWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zbGlkZXIpO1xuXG52YXIgX3NvcnQgPSByZXF1aXJlKCcuL3NvcnQvc29ydCcpO1xuXG52YXIgX3NvcnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc29ydCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzbGlkZXIgPSBuZXcgX3NsaWRlcjIuZGVmYXVsdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3LWJpa2VzX19jb250YWluZXInKSk7XG5zbGlkZXIubG9hZENvbnRlbnQoKTtcblxudmFyIHNvcnQxID0gbmV3IF9zb3J0Mi5kZWZhdWx0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NlY3Rpb24uYmVzdHNlbGxlcnMnKSk7XG5zb3J0MS5sb2FkQ29udGVudCgnLi9hcGkvYmVzdHNlbGxlcnMuanNvbicpO1xuXG52YXIgc29ydDIgPSBuZXcgX3NvcnQyLmRlZmF1bHQoZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2VjdGlvbi5hbGwtYmlrZXMnKSk7XG5zb3J0Mi5sb2FkQ29udGVudCgnLi9hcGkvYWxsLW1vZGVsZXMuanNvbicpO1xuXG59LHtcIi4vc2xpZGVyL3NsaWRlclwiOjUsXCIuL3NvcnQvc29ydFwiOjd9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX0JVUyA9IHJlcXVpcmUoJy4uL2NvcmUvQlVTJyk7XG5cbnZhciBfQlVTMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JVUyk7XG5cbnZhciBfYnVsbGV0VGVtcGxhdGUgPSByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvYnVsbGV0LXRlbXBsYXRlJyk7XG5cbnZhciBfYnVsbGV0VGVtcGxhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnVsbGV0VGVtcGxhdGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVsbGV0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1bGxldChpbmRleCwgZGF0YSkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVsbGV0KTtcblxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3LDqWVyIHVuIGJ1bGxlIHBvdXIgbGUgc2xpZGVyXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudH0gTm9kZSBkZSBsYSBidWxsZVxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoQnVsbGV0LCBbe1xuICAgICAgICBrZXk6ICdjcmVhdGVIVE1MJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUhUTUwoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmVsID0gX2J1bGxldFRlbXBsYXRlMi5kZWZhdWx0LnJlbmRlcih7IGluZGV4OiB0aGlzLmluZGV4IH0pO1xuICAgICAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNsaWNrZWQoZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWw7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogT24gbGFuY2UgbCfDqXbDqG5lbWVudCAnYnVsbGV0OmNsaWNrZWQnIHN1ciBsZSBCVVMgYWZpbiBxdWUgbGUgU2xpZGVyIGwnaW50ZXJjZXB0ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZSDDiXbDqG5lbWVudCBNb3VzZUNsaWNrZWRcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NsaWNrZWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xpY2tlZChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfQlVTMi5kZWZhdWx0LmRpc3BhdGNoKCdidWxsZXQ6Y2xpY2tlZCcsIHtcbiAgICAgICAgICAgICAgICBlbDogdGhpcy5lbCxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQnVsbGV0O1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCdWxsZXQ7XG5cbn0se1wiLi4vY29yZS9CVVNcIjoxLFwiLi4vdGVtcGxhdGVzL2J1bGxldC10ZW1wbGF0ZVwiOjl9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3NsaWRlVGVtcGxhdGUgPSByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvc2xpZGUtdGVtcGxhdGUnKTtcblxudmFyIF9zbGlkZVRlbXBsYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NsaWRlVGVtcGxhdGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgU2xpZGVySXRlbSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTbGlkZXJJdGVtKGluZGV4LCBkYXRhKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbGlkZXJJdGVtKTtcblxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNsaWRlckl0ZW0sIFt7XG4gICAgICAgIGtleTogJ2NyZWF0ZUhUTUwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlSFRNTCgpIHtcbiAgICAgICAgICAgIHRoaXMuZWwgPSBfc2xpZGVUZW1wbGF0ZTIuZGVmYXVsdC5yZW5kZXIoT2JqZWN0LmFzc2lnbih7IGluZGV4OiB0aGlzLmluZGV4IH0sIHRoaXMuZGF0YSkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2xpZGVySXRlbTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2xpZGVySXRlbTtcblxufSx7XCIuLi90ZW1wbGF0ZXMvc2xpZGUtdGVtcGxhdGVcIjoxMH1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfQlVTID0gcmVxdWlyZSgnLi4vY29yZS9CVVMnKTtcblxudmFyIF9CVVMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQlVTKTtcblxudmFyIF9zbGlkZXJJdGVtID0gcmVxdWlyZSgnLi9zbGlkZXItaXRlbScpO1xuXG52YXIgX3NsaWRlckl0ZW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpZGVySXRlbSk7XG5cbnZhciBfYnVsbGV0ID0gcmVxdWlyZSgnLi9idWxsZXQnKTtcblxudmFyIF9idWxsZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnVsbGV0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFNsaWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTbGlkZXIoZWwpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNsaWRlcik7XG5cbiAgICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgICB0aGlzLnNsaWRlcyA9IFtdO1xuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIGluaXRpYWxpc2UgbGUgU2xpZGVyXG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhTbGlkZXIsIFt7XG4gICAgICAgIGtleTogJ2luaXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHRoaXMucHJldmlld1VsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcucHJldmlld19fdWwnKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbVVsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcubmV3LWJpa2VzX191bCcpO1xuXG4gICAgICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJy5uZXctYmlrZXNfX2Fycm93cy0tcHJldmlvdXMnKTtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJy5uZXctYmlrZXNfX2Fycm93cy0tbmV4dCcpO1xuXG4gICAgICAgICAgICB0aGlzLmxpc3RlbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9uIGNoYXJnZSBlbiBBamF4XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsb2FkQ29udGVudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkQ29udGVudCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHJlcS5vcGVuKCdHRVQnLCBcIi4vYXBpL3NsaWRlcy5qc29uXCIsIHRydWUpO1xuICAgICAgICAgICAgcmVxLmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxvYWRlZChyZXEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXEuc2VuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpIGxhIHJlcXXDqHRlIEFqYXggZXN0IHVuIHN1Y2PDqHNcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHJlcSBSZXF1w6p0ZSBBamF4XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsb2FkZWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZGVkKHJlcSkge1xuICAgICAgICAgICAgaWYgKHJlcS5yZWFkeVN0YXRlID09IFhNTEh0dHBSZXF1ZXN0LkRPTkUgJiYgcmVxLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUhUTUxTdHJ1Y3R1cmUoSlNPTi5wYXJzZShyZXEucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogT24gYWpvdXRlIGRlcyBFdmVudExpc3RlbmVycyBzdXIgbGVzIGZsw6hjaGVzLlxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbGlzdGVuJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmxlZnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5jbGlja2VkKC0xKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yaWdodC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmNsaWNrZWQoMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF9CVVMyLmRlZmF1bHQubGlzdGVuKCdidWxsZXQ6Y2xpY2tlZCcsIHRoaXMuY2xpY2tlZCwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQXUgY2xpYyBzdXIgdW5lIGZsw6hjaGUgb3UgdW5lIGJ1bGxlLCBvbiBsYW5jZSBsJ2FuaW1hdGlvbiBkZXMgc2xpZGVzLlxuICAgICAgICAgKiBAcGFyYW0gZGlyZWN0aW9uXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjbGlja2VkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsaWNrZWQoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHNlcXVlbmNlID0gbmV3IFRpbWVsaW5lTWF4KCk7XG4gICAgICAgICAgICB2YXIgc2xpZGVFbCA9IHRoaXMuc2xpZGVzW3RoaXMuY3VycmVudEluZGV4XS5lbDtcbiAgICAgICAgICAgIHZhciBpbWFnZSA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcignaW1nJyk7XG4gICAgICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5iaWtlX19kZXNjcmlwdGlvbicpO1xuXG4gICAgICAgICAgICB2YXIgbmV4dCA9ICh0aGlzLmN1cnJlbnRJbmRleCArIGRpcmVjdGlvbiArIHRoaXMuc2xpZGVzLmxlbmd0aCkgJSB0aGlzLnNsaWRlcy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgZCA9IGRpcmVjdGlvbjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMb3JzIGQndW4gY2xpYyBzdXIgdW5lIGJ1bGxlLCBsZSBwYXJhbcOodHJlIGVzdCBkZSB0eXBlIE1vdXNlQ2xpY2tlZC4gRGFucyBjZSBjYXMsIG9uIGTDqWZpbml0IGxhIGRpcmVjdGlvblxuICAgICAgICAgICAgICogc2Vsb24gbGEgc2xpZGUgZGUgZMOpcGFydCBldCBjZWxsZSBkJ2Fycml2w6llLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uIGluc3RhbmNlb2YgRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBuZXh0ID0gZGlyZWN0aW9uLmRldGFpbC5pbmRleDtcbiAgICAgICAgICAgICAgICBkID0gdGhpcy5jdXJyZW50SW5kZXggPCBuZXh0ID8gMSA6IC0xO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50SW5kZXggIT09IG5leHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dFNsaWRlID0gdGhpcy5zbGlkZXNbbmV4dF0uZWw7XG4gICAgICAgICAgICAgICAgdmFyIGltYWdlTmV4dCA9IG5leHRTbGlkZS5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRpb25OZXh0ID0gbmV4dFNsaWRlLnF1ZXJ5U2VsZWN0b3IoJy5iaWtlX19kZXNjcmlwdGlvbicpO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUGFzIGRlIFNQQU0gIVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmICghVHdlZW5NYXguaXNUd2VlbmluZyhpbWFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2Uuc2V0KCcuYmlrZV9faW1hZ2UnLCB7IGJhY2tmYWNlVmlzaWJpbGl0eTogXCJoaWRkZW5cIiB9KTtcblxuICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS50byhpbWFnZSwgMC42LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvblk6IDkwICogZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHo6IDMwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhc2U6IEJhY2suZWFzZUluLmNvbmZpZygxLjcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0U2xpZGUucXVlcnlTZWxlY3RvcignLm5ldy1iaWtlc19fYmlrZScpLmNsYXNzTGlzdC5yZW1vdmUoJ25ldy1iaWtlc19fYmlrZS0taGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcubmV3LWJpa2VzX19iaWtlJykuY2xhc3NMaXN0LmFkZCgnbmV3LWJpa2VzX19iaWtlLS1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMucHJldmlld1VsLnF1ZXJ5U2VsZWN0b3IoJy5wcmV2aWV3X19pbWFnZS0tYWN0aXZlJykuY2xhc3NMaXN0LnJlbW92ZSgncHJldmlld19faW1hZ2UtLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5wcmV2aWV3VWwucXVlcnlTZWxlY3RvckFsbCgnLnByZXZpZXdfX2ltYWdlJylbbmV4dF0uY2xhc3NMaXN0LmFkZCgncHJldmlld19faW1hZ2UtLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS50byhkZXNjcmlwdGlvbiwgMC42LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVYOiAwLjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVk6IDAuNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhc2U6IEJhY2suZWFzZUluLmNvbmZpZygxLjcpXG4gICAgICAgICAgICAgICAgICAgIH0sICctPTAuNicpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnNldChpbWFnZU5leHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uWTogOTAgKiAtMSAqIGQsXG4gICAgICAgICAgICAgICAgICAgICAgICB6OiAzMDBcbiAgICAgICAgICAgICAgICAgICAgfSwgMC41KTtcblxuICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5zZXQoZGVzY3JpcHRpb25OZXh0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVYOiAwLjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVk6IDAuNVxuICAgICAgICAgICAgICAgICAgICB9LCAwLjUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlLnRvKGltYWdlTmV4dCwgMC42LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvblk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB6OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWFzZTogQmFjay5lYXNlT3V0LmNvbmZpZygxLjcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZS5zdHlsZS50cmFuc2Zvcm0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5jdXJyZW50SW5kZXggPSBuZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS50byhkZXNjcmlwdGlvbk5leHQsIDAuNiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhc2U6IEJhY2suZWFzZU91dC5jb25maWcoMS43KVxuICAgICAgICAgICAgICAgICAgICB9LCAnLT0wLjYnKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9uIGNyw6llIGxlIGNvbnRlbnUgSFRNTCBwb3VyIGNoYXF1ZSBzbGlkZSwgYWluc2kgcXVlIGxhIGJ1bGxlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBkYXRhIERvbm7DqWVzIHLDqWN1cMOpcsOpZXMgZW4gQWpheFxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY3JlYXRlSFRNTFN0cnVjdHVyZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVIVE1MU3RydWN0dXJlKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgX3RoaXM0LnNsaWRlc1tpbmRleF0gPSBuZXcgX3NsaWRlckl0ZW0yLmRlZmF1bHQoaW5kZXgsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIF90aGlzNC5pdGVtVWwuYXBwZW5kQ2hpbGQoX3RoaXM0LnNsaWRlc1tpbmRleF0uY3JlYXRlSFRNTCgpKTtcbiAgICAgICAgICAgICAgICB2YXIgYnVsbGV0ID0gbmV3IF9idWxsZXQyLmRlZmF1bHQoaW5kZXgsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIF90aGlzNC5wcmV2aWV3VWwuYXBwZW5kQ2hpbGQoYnVsbGV0LmNyZWF0ZUhUTUwoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTbGlkZXI7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNsaWRlcjtcblxufSx7XCIuLi9jb3JlL0JVU1wiOjEsXCIuL2J1bGxldFwiOjMsXCIuL3NsaWRlci1pdGVtXCI6NH1dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfYmlrZVRlbXBsYXRlID0gcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2Jpa2UtdGVtcGxhdGUnKTtcblxudmFyIF9iaWtlVGVtcGxhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmlrZVRlbXBsYXRlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJpa2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmlrZShpbmRleCwgZGF0YSkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmlrZSk7XG5cbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCaWtlLCBbe1xuICAgICAgICBrZXk6ICdjcmVhdGVIVE1MJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUhUTUwoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmVsID0gX2Jpa2VUZW1wbGF0ZTIuZGVmYXVsdC5yZW5kZXIodGhpcy5kYXRhKTtcbiAgICAgICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm1vdmUoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlc2V0KGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbW92ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlKGUpIHtcbiAgICAgICAgICAgIFR3ZWVuTWF4LnRvKHRoaXMuZWwsIDAuNCwge1xuICAgICAgICAgICAgICAgIHNjYWxlWDogMS4xNSxcbiAgICAgICAgICAgICAgICBzY2FsZVk6IDEuMTVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNldCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldChlKSB7XG4gICAgICAgICAgICBUd2Vlbk1heC50byh0aGlzLmVsLCAwLjQsIHtcbiAgICAgICAgICAgICAgICBzY2FsZVg6IDEsXG4gICAgICAgICAgICAgICAgc2NhbGVZOiAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCaWtlO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCaWtlO1xuXG59LHtcIi4uL3RlbXBsYXRlcy9iaWtlLXRlbXBsYXRlXCI6OH1dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfYmlrZSA9IHJlcXVpcmUoJy4vYmlrZScpO1xuXG52YXIgX2Jpa2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmlrZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNvcnQoZWxlbWVudCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU29ydCk7XG5cbiAgICAgICAgdGhpcy5lbCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYmlrZXMgPSBbXTtcblxuICAgICAgICBpZiAodGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcuYmVzdHNlbGxlcl9fc2VhcmNoJykpIHRoaXMuc2VhcmNoSW5wdXQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJy5iZXN0c2VsbGVyX19zZWFyY2gnKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU29ydCwgW3tcbiAgICAgICAga2V5OiAnbG9hZENvbnRlbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZENvbnRlbnQodXJsKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICByZXEub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgIHJlcS5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5sb2FkZWQocmVxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVxLnNlbmQoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbG9hZGVkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRlZChyZXEpIHtcbiAgICAgICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PSBYTUxIdHRwUmVxdWVzdC5ET05FICYmIHJlcS5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVIVE1MU3RydWN0dXJlKEpTT04ucGFyc2UocmVxLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjcmVhdGVIVE1MU3RydWN0dXJlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUhUTUxTdHJ1Y3R1cmUoZGF0YSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmlrZSA9IG5ldyBfYmlrZTIuZGVmYXVsdChpbmRleCwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgX3RoaXMyLmJpa2VzLnB1c2goYmlrZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMyLmVsLnF1ZXJ5U2VsZWN0b3IoJ3VsLmJlc3RzZWxsZXJzLWxpc3QnKS5hcHBlbmRDaGlsZChiaWtlLmNyZWF0ZUhUTUwoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5saXN0ZW4oKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbGlzdGVuJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0uYmVzdHNlbGxlcnNfX2Zvcm0gc2VsZWN0JykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuc2VsZWN0Q2hhbmdlZCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaElucHV0KSB0aGlzLnNlYXJjaElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuc2VhcmNoQ2hhbmdlZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NlYXJjaENoYW5nZWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VhcmNoQ2hhbmdlZCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgbGlzdCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcigndWwuYmVzdHNlbGxlcnMtbGlzdCcpO1xuXG4gICAgICAgICAgICBUd2Vlbk1heC50byhsaXN0LCAwLjUsIHtcbiAgICAgICAgICAgICAgICBhbHBoYTogMCxcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LmlubmVySFRNTCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgX3RoaXM0LmJpa2VzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmVsLmlubmVySFRNTC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoX3RoaXM0LnNlYXJjaElucHV0LnZhbHVlLnRvTG93ZXJDYXNlKCkpID4gLTEpIGxpc3QuYXBwZW5kQ2hpbGQoZWxlbWVudC5lbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIFR3ZWVuTWF4LnRvKGxpc3QsIDAuNSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxwaGE6IDFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NlbGVjdENoYW5nZWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0Q2hhbmdlZCgpIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd1bC5iZXN0c2VsbGVycy1saXN0Jyk7XG5cbiAgICAgICAgICAgIHZhciBzb3J0ZXIgPSBcImRhdGEtXCIgKyB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0uYmVzdHNlbGxlcnNfX2Zvcm0gc2VsZWN0JykudmFsdWU7XG4gICAgICAgICAgICB2YXIgYmlrZXMgPSBbXS5zbGljZS5jYWxsKHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnLmJlc3RzZWxsZXJzLWxpc3RfX2xpJykpO1xuXG4gICAgICAgICAgICBiaWtlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuZ2V0QXR0cmlidXRlKHNvcnRlcikgPiBiLmdldEF0dHJpYnV0ZShzb3J0ZXIpID8gMSA6IC0xO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIFR3ZWVuTWF4LnRvKGxpc3QsIDAuNSwge1xuICAgICAgICAgICAgICAgIGFscGhhOiAwLFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QuaW5uZXJIVE1MID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICBiaWtlcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBUd2Vlbk1heC50byhsaXN0LCAwLjUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFscGhhOiAxXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNvcnQ7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNvcnQ7XG5cbn0se1wiLi9iaWtlXCI6Nn1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJpa2VUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCaWtlVGVtcGxhdGUoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCaWtlVGVtcGxhdGUpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCaWtlVGVtcGxhdGUsIG51bGwsIFt7XG4gICAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihkYXRhKSB7XG4gICAgICAgICAgICB2YXIgaHRtbCA9IFwiXFxuICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJiZXN0c2VsbGVycy1saXN0X19saVxcXCIgZGF0YS1wcmljZT1cXFwiXCIgKyBkYXRhLnByaWNlICsgXCJcXFwiIGRhdGEtbmFtZT1cXFwiXCIgKyBkYXRhLnRpdGxlICsgXCJcXFwiIFwiICsgKFwic3RvY2tcIiBpbiBkYXRhID8gXCJkYXRhLXN0b2NrPVxcXCJcIiArIGRhdGEuc3RvY2sgKyBcIlxcXCJcIiA6IG51bGwpICsgXCIgXCIgKyAoXCJwb3B1bGFyaXR5XCIgaW4gZGF0YSA/IFwiZGF0YS1wb3B1bGFyaXR5PVxcXCJcIiArIGRhdGEucG9wdWxhcml0eSArIFwiXFxcIlwiIDogbnVsbCkgKyBcIj5cXG4gICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9XFxcImJlc3RzZWxsZXIgXCIgKyAoZGF0YS5zdG9jayA8IDMgPyBcImJlc3RzZWxsZXItLWRhbmdlclwiIDogJycpICsgXCJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiI1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYmVzdHNlbGxlcl9faW1hZ2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cXFwiXCIgKyBkYXRhLmltYWdlICsgXCJcXFwiIGFsdD1cXFwiSW1hZ2UgZGUgdlxceEU5bG9cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9XFxcImJlc3RzZWxsZXJfX3RpdGxlXFxcIj5cIiArIGRhdGEudGl0bGUgKyBcIjwvaDE+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImJlc3RzZWxsZXJfX2Rlc2NyaXB0aW9uXFxcIj5cIiArIGRhdGEuZGVzY3JpcHRpb24gKyBcIjwvcD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJiZXN0c2VsbGVyLWZvb3RlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJiZXN0c2VsbGVyLWZvb3Rlcl9fc3RvY2tcXFwiPlwiICsgZGF0YS5zdG9jayArIFwiIGVuIHN0b2NrPC9wPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJiZXN0c2VsbGVyLWZvb3Rlcl9fYmFyXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgPC9hcnRpY2xlPlxcbiAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICBcIjtcblxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLmNoaWxkTm9kZXNbMV07XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQmlrZVRlbXBsYXRlO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCaWtlVGVtcGxhdGU7XG5cbn0se31dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1bGxldFRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1bGxldFRlbXBsYXRlKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVsbGV0VGVtcGxhdGUpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCdWxsZXRUZW1wbGF0ZSwgbnVsbCwgW3tcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBodG1sID0gXCJcXG4gICAgICAgICAgICA8bGkgY2xhc3M9XFxcInByZXZpZXdfX2xpXFxcIj5cXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiI1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwcmV2aWV3X19pbWFnZSBcIiArIChkYXRhLmluZGV4ID09PSAwID8gXCJwcmV2aWV3X19pbWFnZS0tYWN0aXZlXCIgOiBudWxsKSArIFwiIHByZXZpZXdfX2ltYWdlLS1pbWFnZS1cIiArIChkYXRhLmluZGV4ICsgMSkgKyBcIlxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgXCI7XG5cbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5jaGlsZE5vZGVzWzFdO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1bGxldFRlbXBsYXRlO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCdWxsZXRUZW1wbGF0ZTtcblxufSx7fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTbGlkZXJUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTbGlkZXJUZW1wbGF0ZSgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNsaWRlclRlbXBsYXRlKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2xpZGVyVGVtcGxhdGUsIG51bGwsIFt7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoZGF0YSkge1xuICAgICAgICAgICAgdmFyIGh0bWwgPSAnXFxuICAgICAgICAgICAgPGxpPlxcbiAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz1cIm5ldy1iaWtlc19fYmlrZScgKyAoZGF0YS5pbmRleCA9PSAwID8gJycgOiBcIiBuZXctYmlrZXNfX2Jpa2UtLWhpZGRlblwiKSArICdcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiaWtlX19pbWFnZSBiaWtlX19pbWFnZS0tcHJldmlldycgKyAoZGF0YS5pbmRleCArIDEpICsgJ1wiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJyArIGRhdGEuaW1hZ2UgKyAnXCIgYWx0PVwiSW1hZ2UgZFxcJ3VuZSBzZWxsZSBkZSB2XFx4RTlsb1wiPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmlrZV9fZGVzY3JpcHRpb25cIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9XCJiaWtlX190aXRsZVwiPicgKyBkYXRhLnRpdGxlICsgJzwvaDE+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJiaWtlX190ZXh0XCI+JyArIGRhdGEuZGVzY3JpcHRpb24gKyAnPC9wPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCInICsgZGF0YS51cmwgKyAnXCIgY2xhc3M9XCJidG4gYmlrZV9fYnRuXCI+Y29tbWFuZGVyIDxzcGFuIGNsYXNzPVwiY2FyZXQgY2FyZXQtcmlnaHQgYmlrZV9fY2FyZXRcIj48L3NwYW4+PC9hPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT5cXG4gICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgJztcblxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLmNoaWxkTm9kZXNbMV07XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2xpZGVyVGVtcGxhdGU7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNsaWRlclRlbXBsYXRlO1xuXG59LHt9XX0se30sWzJdKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSnpjbU12WTI5eVpTOUNWVk11YW5NaUxDSnpjbU12YldGcGJpNXFjeUlzSW5OeVl5OXpiR2xrWlhJdlluVnNiR1YwTG1weklpd2ljM0pqTDNOc2FXUmxjaTl6Ykdsa1pYSXRhWFJsYlM1cWN5SXNJbk55WXk5emJHbGtaWEl2YzJ4cFpHVnlMbXB6SWl3aWMzSmpMM052Y25RdlltbHJaUzVxY3lJc0luTnlZeTl6YjNKMEwzTnZjblF1YW5NaUxDSnpjbU12ZEdWdGNHeGhkR1Z6TDJKcGEyVXRkR1Z0Y0d4aGRHVXVhbk1pTENKemNtTXZkR1Z0Y0d4aGRHVnpMMkoxYkd4bGRDMTBaVzF3YkdGMFpTNXFjeUlzSW5OeVl5OTBaVzF3YkdGMFpYTXZjMnhwWkdVdGRHVnRjR3hoZEdVdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096dHJRa05CWlR0QlFVTllMRkZCUVVzc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEV0QlFYWkNMRU5CUkUwN08wRkJSMWdzWTBGQlZTeHJRa0ZCVXl4RFFVRlVMRVZCUVZrc1MwRkJXaXhGUVVGclFqdEJRVU40UWl4WlFVRkpMRkZCUVZFc1NVRkJTU3hYUVVGS0xFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ0xFVkJRVU1zVVVGQlVTeFRRVUZUTEVWQlFXeENMRVZCUVc1Q0xFTkJRVm83UVVGRFFTeGhRVUZMTEVWQlFVd3NRMEZCVVN4aFFVRlNMRU5CUVhOQ0xFdEJRWFJDTzBGQlEwZ3NTMEZPVlRzN1FVRlJXQ3haUVVGUkxHZENRVUZUTEVOQlFWUXNSVUZCV1N4TlFVRmFMRVZCUVc5Q0xFbEJRWEJDTEVWQlFYbENPMEZCUXpkQ0xHRkJRVXNzUlVGQlRDeERRVUZSTEdkQ1FVRlNMRU5CUVhsQ0xFTkJRWHBDTEVWQlFUUkNMRTlCUVU4c1NVRkJVQ3hEUVVGWkxFbEJRVm9zUTBGQk5VSTdRVUZEU0R0QlFWWlZMRU03T3pzN08wRkRRV1k3T3pzN1FVRkRRVHM3T3pzN08wRkJSVUVzU1VGQlNTeFRRVUZUTEhGQ1FVRlhMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeDFRa0ZCZGtJc1EwRkJXQ3hEUVVGaU8wRkJRMEVzVDBGQlR5eFhRVUZRT3p0QlFVVkJMRWxCUVVrc1VVRkJVU3h0UWtGQlV5eFRRVUZUTEdGQlFWUXNRMEZCZFVJc2NVSkJRWFpDTEVOQlFWUXNRMEZCV2p0QlFVTkJMRTFCUVUwc1YwRkJUaXhEUVVGclFpeDNRa0ZCYkVJN08wRkJSVUVzU1VGQlNTeFJRVUZSTEcxQ1FVRlRMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeHRRa0ZCZGtJc1EwRkJWQ3hEUVVGYU8wRkJRMEVzVFVGQlRTeFhRVUZPTEVOQlFXdENMSGRDUVVGc1FqczdPenM3T3pzN096czdRVU5XUVRzN096dEJRVU5CT3pzN096czdPenRKUVVWeFFpeE5PMEZCUTJwQ0xHOUNRVUZaTEV0QlFWb3NSVUZCYlVJc1NVRkJia0lzUlVGQmVVSTdRVUZCUVRzN1FVRkRja0lzWVVGQlN5eExRVUZNTEVkQlFXRXNTMEZCWWp0QlFVTkJMR0ZCUVVzc1NVRkJUQ3hIUVVGWkxFbEJRVm83UVVGRFNEczdRVUZGUkRzN096czdPenM3TzNGRFFVdGhPMEZCUVVFN08wRkJRMVFzYVVKQlFVc3NSVUZCVEN4SFFVRlZMSGxDUVVGbExFMUJRV1lzUTBGQmMwSXNSVUZCUlN4UFFVRlBMRXRCUVVzc1MwRkJaQ3hGUVVGMFFpeERRVUZXTzBGQlEwRXNhVUpCUVVzc1JVRkJUQ3hEUVVGUkxHZENRVUZTTEVOQlFYbENMRTlCUVhwQ0xFVkJRV3RETEZWQlFVTXNRMEZCUkR0QlFVRkJMSFZDUVVGUExFMUJRVXNzVDBGQlRDeERRVUZoTEVOQlFXSXNRMEZCVUR0QlFVRkJMR0ZCUVd4RE96dEJRVVZCTEcxQ1FVRlBMRXRCUVVzc1JVRkJXanRCUVVOSU96dEJRVVZFT3pzN096czdPenRuUTBGTFVTeERMRVZCUVVjN1FVRkRVQ3hqUVVGRkxHTkJRVVk3UVVGRFFTd3dRa0ZCU1N4UlFVRktMRU5CUVdFc1owSkJRV0lzUlVGQkswSTdRVUZETTBJc2IwSkJRVWtzUzBGQlN5eEZRVVJyUWp0QlFVVXpRaXgxUWtGQlR5eExRVUZMTzBGQlJtVXNZVUZCTDBJN1FVRkpTRHM3T3pzN08ydENRVGRDWjBJc1RUczdPenM3T3pzN096czdRVU5JY2tJN096czdPenM3TzBsQlJYRkNMRlU3UVVGRGFrSXNkMEpCUVZrc1MwRkJXaXhGUVVGdFFpeEpRVUZ1UWl4RlFVRjVRanRCUVVGQk96dEJRVU55UWl4aFFVRkxMRXRCUVV3c1IwRkJZU3hMUVVGaU8wRkJRMEVzWVVGQlN5eEpRVUZNTEVkQlFWa3NTVUZCV2p0QlFVTklPenM3TzNGRFFVVlpPMEZCUTFRc2FVSkJRVXNzUlVGQlRDeEhRVUZWTEhkQ1FVRmpMRTFCUVdRc1EwRkJjVUlzVDBGQlR5eE5RVUZRTEVOQlFXTXNSVUZCUlN4UFFVRlBMRXRCUVVzc1MwRkJaQ3hGUVVGa0xFVkJRWEZETEV0QlFVc3NTVUZCTVVNc1EwRkJja0lzUTBGQlZqdEJRVU5CTEcxQ1FVRlBMRXRCUVVzc1JVRkJXanRCUVVOSU96czdPenM3YTBKQlZHZENMRlU3T3pzN096czdPenM3TzBGRFJuSkNPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenM3T3pzN1NVRkZjVUlzVFR0QlFVTnFRaXh2UWtGQldTeEZRVUZhTEVWQlFXZENPMEZCUVVFN08wRkJRMW9zWVVGQlN5eEZRVUZNTEVkQlFWVXNSVUZCVmp0QlFVTkJMR0ZCUVVzc1RVRkJUQ3hIUVVGakxFVkJRV1E3UVVGRFFTeGhRVUZMTEZsQlFVd3NSMEZCYjBJc1EwRkJjRUk3UVVGRFFTeGhRVUZMTEVsQlFVdzdRVUZEU0RzN1FVRkZSRHM3T3pzN096c3JRa0ZIVHp0QlFVTklMR2xDUVVGTExGTkJRVXdzUjBGQmFVSXNTMEZCU3l4RlFVRk1MRU5CUVZFc1lVRkJVaXhEUVVGelFpeGpRVUYwUWl4RFFVRnFRanRCUVVOQkxHbENRVUZMTEUxQlFVd3NSMEZCWXl4TFFVRkxMRVZCUVV3c1EwRkJVU3hoUVVGU0xFTkJRWE5DTEdkQ1FVRjBRaXhEUVVGa096dEJRVVZCTEdsQ1FVRkxMRWxCUVV3c1IwRkJXU3hMUVVGTExFVkJRVXdzUTBGQlVTeGhRVUZTTEVOQlFYTkNMRGhDUVVGMFFpeERRVUZhTzBGQlEwRXNhVUpCUVVzc1MwRkJUQ3hIUVVGaExFdEJRVXNzUlVGQlRDeERRVUZSTEdGQlFWSXNRMEZCYzBJc01FSkJRWFJDTEVOQlFXSTdPMEZCUlVFc2FVSkJRVXNzVFVGQlREdEJRVU5JT3p0QlFVVkVPenM3T3pzN2MwTkJSMk03UVVGQlFUczdRVUZEVml4blFrRkJTU3hOUVVGTkxFbEJRVWtzWTBGQlNpeEZRVUZXTzBGQlEwRXNaMEpCUVVrc1NVRkJTaXhEUVVGVExFdEJRVlFzUlVGQlowSXNiVUpCUVdoQ0xFVkJRWEZETEVsQlFYSkRPMEZCUTBFc1owSkJRVWtzWjBKQlFVb3NRMEZCY1VJc2EwSkJRWEpDTEVWQlFYbERPMEZCUVVFc2RVSkJRVTBzVFVGQlN5eE5RVUZNTEVOQlFWa3NSMEZCV2l4RFFVRk9PMEZCUVVFc1lVRkJla003UVVGRFFTeG5Ra0ZCU1N4SlFVRktPMEZCUTBnN08wRkJSVVE3T3pzN096czdPeXRDUVV0UExFY3NSVUZCU3p0QlFVTlNMR2RDUVVGSExFbEJRVWtzVlVGQlNpeEpRVUZyUWl4bFFVRmxMRWxCUVdwRExFbEJRWGxETEVsQlFVa3NUVUZCU2l4SlFVRmpMRWRCUVRGRUxFVkJRU3RFTzBGQlF6TkVMSEZDUVVGTExHMUNRVUZNTEVOQlFYbENMRXRCUVVzc1MwRkJUQ3hEUVVGWExFbEJRVWtzV1VGQlppeERRVUY2UWp0QlFVTklPMEZCUTBvN08wRkJSVVE3T3pzN096dHBRMEZIVXp0QlFVRkJPenRCUVVOTUxHbENRVUZMTEVsQlFVd3NRMEZCVlN4blFrRkJWaXhEUVVFeVFpeFBRVUV6UWl4RlFVRnZRenRCUVVGQkxIVkNRVUZOTEU5QlFVc3NUMEZCVEN4RFFVRmhMRU5CUVVNc1EwRkJaQ3hEUVVGT08wRkJRVUVzWVVGQmNFTTdRVUZEUVN4cFFrRkJTeXhMUVVGTUxFTkJRVmNzWjBKQlFWZ3NRMEZCTkVJc1QwRkJOVUlzUlVGQmNVTTdRVUZCUVN4MVFrRkJUU3hQUVVGTExFOUJRVXdzUTBGQllTeERRVUZpTEVOQlFVNDdRVUZCUVN4aFFVRnlRenRCUVVOQkxEQkNRVUZKTEUxQlFVb3NRMEZCVnl4blFrRkJXQ3hGUVVFMlFpeExRVUZMTEU5QlFXeERMRVZCUVRKRExFbEJRVE5ETzBGQlEwZzdPMEZCUlVRN096czdPenM3WjBOQlNWRXNVeXhGUVVGWE8wRkJRVUU3TzBGQlEyWXNaMEpCUVVrc1YwRkJWeXhKUVVGSkxGZEJRVW9zUlVGQlpqdEJRVU5CTEdkQ1FVRkpMRlZCUVZVc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQlN5eFpRVUZxUWl4RlFVRXJRaXhGUVVFM1F6dEJRVU5CTEdkQ1FVRkpMRkZCUVZFc1VVRkJVU3hoUVVGU0xFTkJRWE5DTEV0QlFYUkNMRU5CUVZvN1FVRkRRU3huUWtGQlNTeGpRVUZqTEZGQlFWRXNZVUZCVWl4RFFVRnpRaXh2UWtGQmRFSXNRMEZCYkVJN08wRkJSVUVzWjBKQlFVa3NUMEZCVHl4RFFVRkRMRXRCUVVzc1dVRkJUQ3hIUVVGdlFpeFRRVUZ3UWl4SFFVRm5ReXhMUVVGTExFMUJRVXdzUTBGQldTeE5RVUUzUXl4SlFVRjFSQ3hMUVVGTExFMUJRVXdzUTBGQldTeE5RVUU1UlR0QlFVTkJMR2RDUVVGSkxFbEJRVWtzVTBGQlVqczdRVUZGUVRzN096dEJRVWxCTEdkQ1FVRkhMSEZDUVVGeFFpeExRVUY0UWl4RlFVRXJRanRCUVVNelFpeDFRa0ZCVHl4VlFVRlZMRTFCUVZZc1EwRkJhVUlzUzBGQmVFSTdRVUZEUVN4dlFrRkJTeXhMUVVGTExGbEJRVXdzUjBGQmIwSXNTVUZCY2tJc1IwRkJOa0lzUTBGQk4wSXNSMEZCYVVNc1EwRkJReXhEUVVGMFF6dEJRVU5JT3p0QlFVVkVMR2RDUVVGSExFdEJRVXNzV1VGQlRDeExRVUZ6UWl4SlFVRjZRaXhGUVVFclFqdEJRVU16UWl4dlFrRkJTU3haUVVGWkxFdEJRVXNzVFVGQlRDeERRVUZaTEVsQlFWb3NSVUZCYTBJc1JVRkJiRU03UVVGRFFTeHZRa0ZCU1N4WlFVRlpMRlZCUVZVc1lVRkJWaXhEUVVGM1FpeExRVUY0UWl4RFFVRm9RanRCUVVOQkxHOUNRVUZKTEd0Q1FVRnJRaXhWUVVGVkxHRkJRVllzUTBGQmQwSXNiMEpCUVhoQ0xFTkJRWFJDT3p0QlFVVkJPenM3UVVGSFFTeHZRa0ZCU1N4RFFVRkRMRk5CUVZNc1ZVRkJWQ3hEUVVGdlFpeExRVUZ3UWl4RFFVRk1MRVZCUVdsRE8wRkJRemRDTERaQ1FVRlRMRWRCUVZRc1EwRkJZU3hqUVVGaUxFVkJRVFpDTEVWQlFVTXNiMEpCUVc5Q0xGRkJRWEpDTEVWQlFUZENPenRCUVVWQkxEWkNRVUZUTEVWQlFWUXNRMEZCV1N4TFFVRmFMRVZCUVcxQ0xFZEJRVzVDTEVWQlFYZENPMEZCUTNCQ0xHMURRVUZYTEV0QlFVc3NRMEZFU1R0QlFVVndRaXd5UWtGQlJ5eEhRVVpwUWp0QlFVZHdRaXc0UWtGQlRTeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRmFMRU5CUVcxQ0xFZEJRVzVDTEVOQlNHTTdRVUZKY0VJc2IwTkJRVmtzYzBKQlFVMDdRVUZEWkN4elEwRkJWU3hoUVVGV0xFTkJRWGRDTEd0Q1FVRjRRaXhGUVVFMFF5eFRRVUUxUXl4RFFVRnpSQ3hOUVVGMFJDeERRVUUyUkN4NVFrRkJOMFE3UVVGRFFTeHZRMEZCVVN4aFFVRlNMRU5CUVhOQ0xHdENRVUYwUWl4RlFVRXdReXhUUVVFeFF5eERRVUZ2UkN4SFFVRndSQ3hEUVVGM1JDeDVRa0ZCZUVRN1FVRkRRU3h0UTBGQlN5eFRRVUZNTEVOQlFXVXNZVUZCWml4RFFVRTJRaXg1UWtGQk4wSXNSVUZCZDBRc1UwRkJlRVFzUTBGQmEwVXNUVUZCYkVVc1EwRkJlVVVzZDBKQlFYcEZPMEZCUTBFc2JVTkJRVXNzVTBGQlRDeERRVUZsTEdkQ1FVRm1MRU5CUVdkRExHbENRVUZvUXl4RlFVRnRSQ3hKUVVGdVJDeEZRVUY1UkN4VFFVRjZSQ3hEUVVGdFJTeEhRVUZ1UlN4RFFVRjFSU3gzUWtGQmRrVTdRVUZEU0R0QlFWUnRRaXh4UWtGQmVFSTdPMEZCV1VFc05rSkJRVk1zUlVGQlZDeERRVUZaTEZkQlFWb3NSVUZCZVVJc1IwRkJla0lzUlVGQk9FSTdRVUZETVVJc2FVTkJRVk1zUTBGRWFVSTdRVUZGTVVJc1owTkJRVkVzUjBGR2EwSTdRVUZITVVJc1owTkJRVkVzUjBGSWEwSTdRVUZKTVVJc09FSkJRVTBzUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCV2l4RFFVRnRRaXhIUVVGdVFqdEJRVXB2UWl4eFFrRkJPVUlzUlVGTFJ5eFBRVXhJT3p0QlFVOUJMRFpDUVVGVExFZEJRVlFzUTBGQllTeFRRVUZpTEVWQlFYZENPMEZCUTNCQ0xHMURRVUZYTEV0QlFVc3NRMEZCUXl4RFFVRk9MRWRCUVZVc1EwRkVSRHRCUVVWd1Fpd3lRa0ZCUnp0QlFVWnBRaXh4UWtGQmVFSXNSVUZIUnl4SFFVaElPenRCUVV0QkxEWkNRVUZUTEVkQlFWUXNRMEZCWVN4bFFVRmlMRVZCUVRoQ08wRkJRekZDTEdsRFFVRlRMRU5CUkdsQ08wRkJSVEZDTEdkRFFVRlJMRWRCUm10Q08wRkJSekZDTEdkRFFVRlJPMEZCU0d0Q0xIRkNRVUU1UWl4RlFVbEhMRWRCU2tnN08wRkJUVUVzTmtKQlFWTXNSVUZCVkN4RFFVRlpMRk5CUVZvc1JVRkJkVUlzUjBGQmRrSXNSVUZCTkVJN1FVRkRlRUlzYlVOQlFWY3NRMEZFWVR0QlFVVjRRaXd5UWtGQlJ5eERRVVp4UWp0QlFVZDRRaXc0UWtGQlRTeExRVUZMTEU5QlFVd3NRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFZEJRWEJDTEVOQlNHdENPMEZCU1hoQ0xHOURRVUZaTEhOQ1FVRk5PMEZCUTJRc2EwTkJRVTBzUzBGQlRpeERRVUZaTEZOQlFWb3NSMEZCZDBJc1NVRkJlRUk3UVVGRFFTeHRRMEZCU3l4WlFVRk1MRWRCUVc5Q0xFbEJRWEJDTzBGQlEwZzdRVUZRZFVJc2NVSkJRVFZDT3p0QlFWVkJMRFpDUVVGVExFVkJRVlFzUTBGQldTeGxRVUZhTEVWQlFUWkNMRWRCUVRkQ0xFVkJRV3RETzBGQlF6bENMR2xEUVVGVExFTkJSSEZDTzBGQlJUbENMR2REUVVGUkxFTkJSbk5DTzBGQlJ6bENMR2REUVVGUkxFTkJTSE5DTzBGQlNUbENMRGhDUVVGTkxFdEJRVXNzVDBGQlRDeERRVUZoTEUxQlFXSXNRMEZCYjBJc1IwRkJjRUk3UVVGS2QwSXNjVUpCUVd4RExFVkJTMGNzVDBGTVNEczdRVUZQUVN3MlFrRkJVeXhKUVVGVU8wRkJRMGc3UVVGRFNqdEJRVU5LT3p0QlFVVkVPenM3T3pzN096czBRMEZMYjBJc1NTeEZRVUZOTzBGQlFVRTdPMEZCUTNSQ0xHbENRVUZMTEU5QlFVd3NRMEZCWVN4VlFVRkRMRTlCUVVRc1JVRkJWU3hMUVVGV0xFVkJRVzlDTzBGQlF6ZENMSFZDUVVGTExFMUJRVXdzUTBGQldTeExRVUZhTEVsQlFYRkNMSGxDUVVGbExFdEJRV1lzUlVGQmMwSXNUMEZCZEVJc1EwRkJja0k3UVVGRFFTeDFRa0ZCU3l4TlFVRk1MRU5CUVZrc1YwRkJXaXhEUVVGM1FpeFBRVUZMTEUxQlFVd3NRMEZCV1N4TFFVRmFMRVZCUVcxQ0xGVkJRVzVDTEVWQlFYaENPMEZCUTBFc2IwSkJRVWtzVTBGQlV5eHhRa0ZCVnl4TFFVRllMRVZCUVd0Q0xFOUJRV3hDTEVOQlFXSTdRVUZEUVN4MVFrRkJTeXhUUVVGTUxFTkJRV1VzVjBGQlppeERRVUV5UWl4UFFVRlBMRlZCUVZBc1JVRkJNMEk3UVVGRFNDeGhRVXhFTzBGQlRVZzdPenM3T3p0clFrRndTbWRDTEUwN096czdPenM3T3pzN08wRkRTbkpDT3pzN096czdPenRKUVVWeFFpeEpPMEZCUTJwQ0xHdENRVUZaTEV0QlFWb3NSVUZCYlVJc1NVRkJia0lzUlVGQmVVSTdRVUZCUVRzN1FVRkRja0lzWVVGQlN5eExRVUZNTEVkQlFXRXNTMEZCWWp0QlFVTkJMR0ZCUVVzc1NVRkJUQ3hIUVVGWkxFbEJRVm83UVVGRFNEczdPenR4UTBGRldUdEJRVUZCT3p0QlFVTlVMR2xDUVVGTExFVkJRVXdzUjBGQlZTeDFRa0ZCWVN4TlFVRmlMRU5CUVc5Q0xFdEJRVXNzU1VGQmVrSXNRMEZCVmp0QlFVTkJMR2xDUVVGTExFVkJRVXdzUTBGQlVTeG5Ra0ZCVWl4RFFVRjVRaXhaUVVGNlFpeEZRVUYxUXl4VlFVRkRMRU5CUVVRN1FVRkJRU3gxUWtGQlR5eE5RVUZMTEVsQlFVd3NRMEZCVlN4RFFVRldMRU5CUVZBN1FVRkJRU3hoUVVGMlF6dEJRVU5CTEdsQ1FVRkxMRVZCUVV3c1EwRkJVU3huUWtGQlVpeERRVUY1UWl4WlFVRjZRaXhGUVVGMVF5eFZRVUZETEVOQlFVUTdRVUZCUVN4MVFrRkJUeXhOUVVGTExFdEJRVXdzUTBGQlZ5eERRVUZZTEVOQlFWQTdRVUZCUVN4aFFVRjJRenRCUVVOQkxHMUNRVUZQTEV0QlFVc3NSVUZCV2p0QlFVTklPenM3TmtKQlJVa3NReXhGUVVGSE8wRkJRMG9zY1VKQlFWTXNSVUZCVkN4RFFVRlpMRXRCUVVzc1JVRkJha0lzUlVGQmNVSXNSMEZCY2tJc1JVRkJNRUk3UVVGRGRFSXNkMEpCUVZFc1NVRkVZenRCUVVWMFFpeDNRa0ZCVVR0QlFVWmpMR0ZCUVRGQ08wRkJTVWc3T3pzNFFrRkZTeXhETEVWQlFVYzdRVUZEVEN4eFFrRkJVeXhGUVVGVUxFTkJRVmtzUzBGQlN5eEZRVUZxUWl4RlFVRnhRaXhIUVVGeVFpeEZRVUV3UWp0QlFVTjBRaXgzUWtGQlVTeERRVVJqTzBGQlJYUkNMSGRDUVVGUk8wRkJSbU1zWVVGQk1VSTdRVUZKU0RzN096czdPMnRDUVhwQ1owSXNTVHM3T3pzN096czdPenM3UVVOR2NrSTdPenM3T3pzN08wbEJSWEZDTEVrN1FVRkRha0lzYTBKQlFWa3NUMEZCV2l4RlFVRnhRanRCUVVGQk96dEJRVU5xUWl4aFFVRkxMRVZCUVV3c1IwRkJWU3hQUVVGV08wRkJRMEVzWVVGQlN5eExRVUZNTEVkQlFXRXNSVUZCWWpzN1FVRkZRU3haUVVGSExFdEJRVXNzUlVGQlRDeERRVUZSTEdGQlFWSXNRMEZCYzBJc2NVSkJRWFJDTEVOQlFVZ3NSVUZEU1N4TFFVRkxMRmRCUVV3c1IwRkJiVUlzUzBGQlN5eEZRVUZNTEVOQlFWRXNZVUZCVWl4RFFVRnpRaXh4UWtGQmRFSXNRMEZCYmtJN1FVRkRVRHM3T3p0dlEwRkZWeXhITEVWQlFVczdRVUZCUVRzN1FVRkRZaXhuUWtGQlNTeE5RVUZOTEVsQlFVa3NZMEZCU2l4RlFVRldPMEZCUTBFc1owSkJRVWtzU1VGQlNpeERRVUZUTEV0QlFWUXNSVUZCWjBJc1IwRkJhRUlzUlVGQmNVSXNTVUZCY2tJN1FVRkRRU3huUWtGQlNTeG5Ra0ZCU2l4RFFVRnhRaXhyUWtGQmNrSXNSVUZCZVVNN1FVRkJRU3gxUWtGQlRTeE5RVUZMTEUxQlFVd3NRMEZCV1N4SFFVRmFMRU5CUVU0N1FVRkJRU3hoUVVGNlF6dEJRVU5CTEdkQ1FVRkpMRWxCUVVvN1FVRkRTRHM3T3l0Q1FVVk5MRWNzUlVGQlN6dEJRVU5TTEdkQ1FVRkhMRWxCUVVrc1ZVRkJTaXhKUVVGclFpeGxRVUZsTEVsQlFXcERMRWxCUVhsRExFbEJRVWtzVFVGQlNpeEpRVUZqTEVkQlFURkVMRVZCUVN0RU8wRkJRek5FTEhGQ1FVRkxMRzFDUVVGTUxFTkJRWGxDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRWxCUVVrc1dVRkJaaXhEUVVGNlFqdEJRVU5JTzBGQlEwbzdPenMwUTBGRmJVSXNTU3hGUVVGTk8wRkJRVUU3TzBGQlEzUkNMR2xDUVVGTExFOUJRVXdzUTBGQllTeFZRVUZETEU5QlFVUXNSVUZCVlN4TFFVRldMRVZCUVc5Q08wRkJRemRDTEc5Q1FVRkpMRTlCUVU4c2JVSkJRVk1zUzBGQlZDeEZRVUZuUWl4UFFVRm9RaXhEUVVGWU8wRkJRMEVzZFVKQlFVc3NTMEZCVEN4RFFVRlhMRWxCUVZnc1EwRkJaMElzU1VGQmFFSTdRVUZEUVN4MVFrRkJTeXhGUVVGTUxFTkJRVkVzWVVGQlVpeERRVUZ6UWl4eFFrRkJkRUlzUlVGQk5rTXNWMEZCTjBNc1EwRkJlVVFzUzBGQlN5eFZRVUZNTEVWQlFYcEVPMEZCUTBnc1lVRktSRHM3UVVGTlFTeHBRa0ZCU3l4TlFVRk1PMEZCUTBnN096dHBRMEZGVVR0QlFVRkJPenRCUVVOTUxHbENRVUZMTEVWQlFVd3NRMEZCVVN4aFFVRlNMRU5CUVhOQ0xDdENRVUYwUWl4RlFVRjFSQ3huUWtGQmRrUXNRMEZCZDBVc1VVRkJlRVVzUlVGQmEwWTdRVUZCUVN4MVFrRkJUU3hQUVVGTExHRkJRVXdzUlVGQlRqdEJRVUZCTEdGQlFXeEdPenRCUVVWQkxHZENRVUZITEV0QlFVc3NWMEZCVWl4RlFVTkpMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeG5Ra0ZCYWtJc1EwRkJhME1zVDBGQmJFTXNSVUZCTWtNN1FVRkJRU3gxUWtGQlRTeFBRVUZMTEdGQlFVd3NSVUZCVGp0QlFVRkJMR0ZCUVRORE8wRkJRMUE3T3p0M1EwRkZaVHRCUVVGQk96dEJRVU5hTEdkQ1FVRkpMRTlCUVU4c1MwRkJTeXhGUVVGTUxFTkJRVkVzWVVGQlVpeERRVUZ6UWl4eFFrRkJkRUlzUTBGQldEczdRVUZGUVN4eFFrRkJVeXhGUVVGVUxFTkJRVmtzU1VGQldpeEZRVUZyUWl4SFFVRnNRaXhGUVVGMVFqdEJRVU51UWl4MVFrRkJUeXhEUVVSWk8wRkJSVzVDTERSQ1FVRlpMSE5DUVVGTk8wRkJRMlFzZVVKQlFVc3NVMEZCVEN4SFFVRnBRaXhKUVVGcVFqczdRVUZGUVN3eVFrRkJTeXhMUVVGTUxFTkJRVmNzVDBGQldDeERRVUZ0UWl4VlFVRkRMRTlCUVVRc1JVRkJZVHRCUVVNMVFpdzBRa0ZCUnl4UlFVRlJMRVZCUVZJc1EwRkJWeXhUUVVGWUxFTkJRWEZDTEZkQlFYSkNMRWRCUVcxRExFOUJRVzVETEVOQlFUSkRMRTlCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVRjFRaXhYUVVGMlFpeEZRVUV6UXl4SlFVRnRSaXhEUVVGRExFTkJRWFpHTEVWQlEwa3NTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGRkJRVkVzUlVGQmVrSTdRVUZEVUN4eFFrRklSRHM3UVVGTFFTdzJRa0ZCVXl4RlFVRlVMRU5CUVZrc1NVRkJXaXhGUVVGclFpeEhRVUZzUWl4RlFVRjFRanRCUVVOdVFpd3JRa0ZCVHp0QlFVUlpMSEZDUVVGMlFqdEJRVWRJTzBGQlltdENMR0ZCUVhaQ08wRkJaVWc3T3p0M1EwRkZaVHRCUVVOYUxHZENRVUZKTEU5QlFVOHNTMEZCU3l4RlFVRk1MRU5CUVZFc1lVRkJVaXhEUVVGelFpeHhRa0ZCZEVJc1EwRkJXRHM3UVVGRlFTeG5Ra0ZCU1N4VFFVRlRMRlZCUVZVc1MwRkJTeXhGUVVGTUxFTkJRVkVzWVVGQlVpeERRVUZ6UWl3clFrRkJkRUlzUlVGQmRVUXNTMEZCT1VVN1FVRkRRU3huUWtGQlNTeFJRVUZSTEVkQlFVY3NTMEZCU0N4RFFVRlRMRWxCUVZRc1EwRkJZeXhMUVVGTExFVkJRVXdzUTBGQlVTeG5Ra0ZCVWl4RFFVRjVRaXgxUWtGQmVrSXNRMEZCWkN4RFFVRmFPenRCUVVWQkxHdENRVUZOTEVsQlFVNHNRMEZCVnl4VlFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFVkJRVlU3UVVGRGFrSXNkVUpCUVU4c1JVRkJSU3haUVVGR0xFTkJRV1VzVFVGQlppeEpRVUY1UWl4RlFVRkZMRmxCUVVZc1EwRkJaU3hOUVVGbUxFTkJRWHBDTEVkQlFXdEVMRU5CUVd4RUxFZEJRWE5FTEVOQlFVTXNRMEZCT1VRN1FVRkRTQ3hoUVVaRU96dEJRVWxCTEhGQ1FVRlRMRVZCUVZRc1EwRkJXU3hKUVVGYUxFVkJRV3RDTEVkQlFXeENMRVZCUVhWQ08wRkJRMjVDTEhWQ1FVRlBMRU5CUkZrN1FVRkZia0lzTkVKQlFWa3NjMEpCUVUwN1FVRkRaQ3g1UWtGQlN5eFRRVUZNTEVkQlFXbENMRWxCUVdwQ096dEJRVVZCTERCQ1FVRk5MRTlCUVU0c1EwRkJZeXhWUVVGRExFOUJRVVFzUlVGQllUdEJRVU4yUWl3MlFrRkJTeXhYUVVGTUxFTkJRV2xDTEU5QlFXcENPMEZCUTBnc2NVSkJSa1E3TzBGQlNVRXNOa0pCUVZNc1JVRkJWQ3hEUVVGWkxFbEJRVm9zUlVGQmEwSXNSMEZCYkVJc1JVRkJkVUk3UVVGRGJrSXNLMEpCUVU4N1FVRkVXU3h4UWtGQmRrSTdRVUZIU0R0QlFWcHJRaXhoUVVGMlFqdEJRV05JT3pzN096czdhMEpCYmtablFpeEpPenM3T3pzN096czdPenM3TzBsRFJrRXNXVHM3T3pzN096c3JRa0ZEU0N4SkxFVkJRVTA3UVVGRGFFSXNaMEpCUVVrc01FVkJReXRETEV0QlFVc3NTMEZFY0VRc2RVSkJRM2xGTEV0QlFVc3NTMEZFT1VVc1dVRkRkMFlzVjBGQlZ5eEpRVUZZTEVkQlFXdENMR3RDUVVGclFpeExRVUZMTEV0QlFYWkNMRWRCUVN0Q0xFbEJRV3BFTEVkQlFYZEVMRWxCUkdoS0xGZEJRM2RLTEdkQ1FVRm5RaXhKUVVGb1FpeEhRVUYxUWl4MVFrRkJkVUlzUzBGQlN5eFZRVUUxUWl4SFFVRjVReXhKUVVGb1JTeEhRVUYxUlN4SlFVUXZUaXg1UkVGRmFVTXNTMEZCU3l4TFFVRk1MRWRCUVdFc1EwRkJZaXhIUVVGcFFpeHZRa0ZCYWtJc1IwRkJkME1zUlVGR2VrVXNiMHBCU3pSQ0xFdEJRVXNzUzBGTWFrTXNLMGhCVHpSRExFdEJRVXNzUzBGUWFrUXNORVZCVVdsRUxFdEJRVXNzVjBGU2RFUXNNa2xCVlhORUxFdEJRVXNzUzBGV00wUXNLMDFCUVVvN08wRkJhMEpCTEdkQ1FVRkpMRmRCUVZjc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEV0QlFYWkNMRU5CUVdZN1FVRkRRU3h4UWtGQlV5eFRRVUZVTEVkQlFYRkNMRWxCUVhKQ08wRkJRMEVzYlVKQlFVOHNVMEZCVXl4VlFVRlVMRU5CUVc5Q0xFTkJRWEJDTEVOQlFWQTdRVUZEU0RzN096czdPMnRDUVhaQ1owSXNXVHM3T3pzN096czdPenM3T3p0SlEwRkJMR003T3pzN096czdLMEpCUTBnc1NTeEZRVUZOTzBGQlEyaENMR2RDUVVGSkxIVkpRVWR4UXl4TFFVRkxMRXRCUVV3c1MwRkJaU3hEUVVGbUxFZEJRVzFDTEhkQ1FVRnVRaXhIUVVFNFF5eEpRVWh1Uml4cFEwRkhhVWdzUzBGQlN5eExRVUZNTEVkQlFXRXNRMEZJT1Vnc2EwVkJRVW83TzBGQlVVRXNaMEpCUVVrc1YwRkJWeXhUUVVGVExHRkJRVlFzUTBGQmRVSXNTMEZCZGtJc1EwRkJaanRCUVVOQkxIRkNRVUZUTEZOQlFWUXNSMEZCY1VJc1NVRkJja0k3UVVGRFFTeHRRa0ZCVHl4VFFVRlRMRlZCUVZRc1EwRkJiMElzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3T3pzN2EwSkJZbWRDTEdNN096czdPenM3T3pzN096czdTVU5CUVN4ak96czdPenM3T3l0Q1FVTklMRWtzUlVGQlRUdEJRVU5vUWl4blFrRkJTU3huUmtGRmNVTXNTMEZCU3l4TFFVRk1MRWxCUVdNc1EwRkJaQ3hIUVVGclFpeEZRVUZzUWl4SFFVRjFRaXd3UWtGR05VUXNPRVZCUjNORUxFdEJRVXNzUzBGQlRDeEhRVUZoTEVOQlNHNUZMQ3REUVVsM1FpeExRVUZMTEV0QlNqZENMR2xNUVU5elF5eExRVUZMTEV0QlVETkRMRFpFUVZGdlF5eExRVUZMTEZkQlVucERMQ3REUVZOMVFpeExRVUZMTEVkQlZEVkNMRzFNUVVGS096dEJRV1ZCTEdkQ1FVRkpMRmRCUVZjc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEV0QlFYWkNMRU5CUVdZN1FVRkRRU3h4UWtGQlV5eFRRVUZVTEVkQlFYRkNMRWxCUVhKQ08wRkJRMEVzYlVKQlFVOHNVMEZCVXl4VlFVRlVMRU5CUVc5Q0xFTkJRWEJDTEVOQlFWQTdRVUZEU0RzN096czdPMnRDUVhCQ1owSXNZeUlzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUlHVW9kQ3h1TEhJcGUyWjFibU4wYVc5dUlITW9ieXgxS1h0cFppZ2hibHR2WFNsN2FXWW9JWFJiYjEwcGUzWmhjaUJoUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN2FXWW9JWFVtSm1FcGNtVjBkWEp1SUdFb2J5d2hNQ2s3YVdZb2FTbHlaWFIxY200Z2FTaHZMQ0V3S1R0MllYSWdaajF1WlhjZ1JYSnliM0lvWENKRFlXNXViM1FnWm1sdVpDQnRiMlIxYkdVZ0oxd2lLMjhyWENJblhDSXBPM1JvY205M0lHWXVZMjlrWlQxY0lrMVBSRlZNUlY5T1QxUmZSazlWVGtSY0lpeG1mWFpoY2lCc1BXNWJiMTA5ZTJWNGNHOXlkSE02ZTMxOU8zUmJiMTFiTUYwdVkyRnNiQ2hzTG1WNGNHOXlkSE1zWm5WdVkzUnBiMjRvWlNsN2RtRnlJRzQ5ZEZ0dlhWc3hYVnRsWFR0eVpYUjFjbTRnY3lodVAyNDZaU2w5TEd3c2JDNWxlSEJ2Y25SekxHVXNkQ3h1TEhJcGZYSmxkSFZ5YmlCdVcyOWRMbVY0Y0c5eWRITjlkbUZ5SUdrOWRIbHdaVzltSUhKbGNYVnBjbVU5UFZ3aVpuVnVZM1JwYjI1Y0lpWW1jbVZ4ZFdseVpUdG1iM0lvZG1GeUlHODlNRHR2UEhJdWJHVnVaM1JvTzI4ckt5bHpLSEpiYjEwcE8zSmxkSFZ5YmlCemZTa2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUNBZ1pXd2dPaUJrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGthWFluS1N4Y2JseHVJQ0FnSUdScGMzQmhkR05vT2lCbWRXNWpkR2x2YmlobExDQmtZWFJoY3lsN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JsZG1WdWRDQTlJRzVsZHlCRGRYTjBiMjFGZG1WdWRDaGxMQ0I3WkdWMFlXbHNPaUJrWVhSaGN5QjhmQ0I3ZlgwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc0xtUnBjM0JoZEdOb1JYWmxiblFvWlhabGJuUXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnNhWE4wWlc0NklHWjFibU4wYVc5dUtHVXNJRzFsZEdodlpDd2djMk52Y0NsN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wld3dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lobExDQnRaWFJvYjJRdVltbHVaQ2h6WTI5d0tTazdYRzRnSUNBZ2ZWeHVmVHNpTENKcGJYQnZjblFnVTJ4cFpHVnlJR1p5YjIwZ0p5NHZjMnhwWkdWeUwzTnNhV1JsY2ljN1hHNXBiWEJ2Y25RZ1UyOXlkQ0JtY205dElDY3VMM052Y25RdmMyOXlkQ2M3WEc1Y2JuWmhjaUJ6Ykdsa1pYSWdQU0J1WlhjZ1UyeHBaR1Z5S0dSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTV1WlhjdFltbHJaWE5mWDJOdmJuUmhhVzVsY2ljcEtUdGNibk5zYVdSbGNpNXNiMkZrUTI5dWRHVnVkQ2dwTzF4dVhHNTJZWElnYzI5eWRERWdQU0J1WlhjZ1UyOXlkQ2hrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDZHpaV04wYVc5dUxtSmxjM1J6Wld4c1pYSnpKeWtwTzF4dWMyOXlkREV1Ykc5aFpFTnZiblJsYm5Rb0p5NHZZWEJwTDJKbGMzUnpaV3hzWlhKekxtcHpiMjRuS1R0Y2JseHVkbUZ5SUhOdmNuUXlJRDBnYm1WM0lGTnZjblFvWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25jMlZqZEdsdmJpNWhiR3d0WW1sclpYTW5LU2s3WEc1emIzSjBNaTVzYjJGa1EyOXVkR1Z1ZENnbkxpOWhjR2t2WVd4c0xXMXZaR1ZzWlhNdWFuTnZiaWNwTzF4dUlpd2lhVzF3YjNKMElFSlZVeUJtY205dElDY3VMaTlqYjNKbEwwSlZVeWM3WEc1cGJYQnZjblFnUW5Wc2JHVjBWR1Z0Y0d4aGRHVWdabkp2YlNBbkxpNHZkR1Z0Y0d4aGRHVnpMMkoxYkd4bGRDMTBaVzF3YkdGMFpTZGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1FuVnNiR1YwSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2locGJtUmxlQ3dnWkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHVaR1Y0SUQwZ2FXNWtaWGc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR0YwWVNBOUlHUmhkR0U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTNMRHFXVnlJSFZ1SUdKMWJHeGxJSEJ2ZFhJZ2JHVWdjMnhwWkdWeVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JXeGxiV1Z1ZEgwZ1RtOWtaU0JrWlNCc1lTQmlkV3hzWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR055WldGMFpVaFVUVXdvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wld3Z1BTQkNkV3hzWlhSVVpXMXdiR0YwWlM1eVpXNWtaWElvZXlCcGJtUmxlRG9nZEdocGN5NXBibVJsZUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lDaGxLU0E5UGlCMGFHbHpMbU5zYVdOclpXUW9aU2twTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZzTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUU5dUlHeGhibU5sSUd3bnc2bDJ3Nmh1WlcxbGJuUWdKMkoxYkd4bGREcGpiR2xqYTJWa0p5QnpkWElnYkdVZ1FsVlRJR0ZtYVc0Z2NYVmxJR3hsSUZOc2FXUmxjaUJzSjJsdWRHVnlZMlZ3ZEdWY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0JsSU1PSmRzT29ibVZ0Wlc1MElFMXZkWE5sUTJ4cFkydGxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnNhV05yWldRb1pTa2dlMXh1SUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0FnSUVKVlV5NWthWE53WVhSamFDZ25ZblZzYkdWME9tTnNhV05yWldRbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJEb2dkR2hwY3k1bGJDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRPaUIwYUdsekxtbHVaR1Y0WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JuMGlMQ0pwYlhCdmNuUWdVMnhwWkdWVVpXMXdiR0YwWlNCbWNtOXRJQ2N1TGk5MFpXMXdiR0YwWlhNdmMyeHBaR1V0ZEdWdGNHeGhkR1VuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJUYkdsa1pYSkpkR1Z0SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2locGJtUmxlQ3dnWkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHVaR1Y0SUQwZ2FXNWtaWGc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR0YwWVNBOUlHUmhkR0U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZM0psWVhSbFNGUk5UQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkNBOUlGTnNhV1JsVkdWdGNHeGhkR1V1Y21WdVpHVnlLRTlpYW1WamRDNWhjM05wWjI0b2V5QnBibVJsZURvZ2RHaHBjeTVwYm1SbGVDQjlMQ0IwYUdsekxtUmhkR0VwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV3c3WEc0Z0lDQWdmVnh1ZlNJc0ltbHRjRzl5ZENCQ1ZWTWdabkp2YlNBbkxpNHZZMjl5WlM5Q1ZWTW5PMXh1YVcxd2IzSjBJRk5zYVdSbGNrbDBaVzBnWm5KdmJTQW5MaTl6Ykdsa1pYSXRhWFJsYlNjN1hHNXBiWEJ2Y25RZ1FuVnNiR1YwSUdaeWIyMGdKeTR2WW5Wc2JHVjBKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVMnhwWkdWeUlIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxiQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzSUQwZ1pXdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyeHBaR1Z6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEVsdVpHVjRJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm1sMEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUMjRnYVc1cGRHbGhiR2x6WlNCc1pTQlRiR2xrWlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JwYm1sMEtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnlaWFpwWlhkVmJDQTlJSFJvYVhNdVpXd3VjWFZsY25sVFpXeGxZM1J2Y2lnbkxuQnlaWFpwWlhkZlgzVnNKeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWFJsYlZWc0lEMGdkR2hwY3k1bGJDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWJtVjNMV0pwYTJWelgxOTFiQ2NwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YkdWbWRDQTlJSFJvYVhNdVpXd3VjWFZsY25sVFpXeGxZM1J2Y2lnbkxtNWxkeTFpYVd0bGMxOWZZWEp5YjNkekxTMXdjbVYyYVc5MWN5Y3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnBaMmgwSUQwZ2RHaHBjeTVsYkM1eGRXVnllVk5sYkdWamRHOXlLQ2N1Ym1WM0xXSnBhMlZ6WDE5aGNuSnZkM010TFc1bGVIUW5LVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbXhwYzNSbGJpZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRTl1SUdOb1lYSm5aU0JsYmlCQmFtRjRYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHOWhaRU52Ym5SbGJuUW9LU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWEVnUFNCdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRb0tUdGNiaUFnSUNBZ0lDQWdjbVZ4TG05d1pXNG9KMGRGVkNjc0lGd2lMaTloY0drdmMyeHBaR1Z6TG1wemIyNWNJaXdnZEhKMVpTazdYRzRnSUNBZ0lDQWdJSEpsY1M1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkeVpXRmtlWE4wWVhSbFkyaGhibWRsSnl3Z0tDa2dQVDRnZEdocGN5NXNiMkZrWldRb2NtVnhLU2s3WEc0Z0lDQWdJQ0FnSUhKbGNTNXpaVzVrS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1Uya2diR0VnY21WeGRjT29kR1VnUVdwaGVDQmxjM1FnZFc0Z2MzVmpZOE9vYzF4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEpsY1NCU1pYRjF3NnAwWlNCQmFtRjRYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHOWhaR1ZrS0hKbGNTa2dlMXh1SUNBZ0lDQWdJQ0JwWmloeVpYRXVjbVZoWkhsVGRHRjBaU0E5UFNCWVRVeElkSFJ3VW1WeGRXVnpkQzVFVDA1RklDWW1JSEpsY1M1emRHRjBkWE1nUFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVWhVVFV4VGRISjFZM1IxY21Vb1NsTlBUaTV3WVhKelpTaHlaWEV1Y21WemNHOXVjMlZVWlhoMEtTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJQYmlCaGFtOTFkR1VnWkdWeklFVjJaVzUwVEdsemRHVnVaWEp6SUhOMWNpQnNaWE1nWm16RHFHTm9aWE11WEc0Z0lDQWdJQ292WEc0Z0lDQWdiR2x6ZEdWdUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxteGxablF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0FvS1NBOVBpQjBhR2x6TG1Oc2FXTnJaV1FvTFRFcEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWFXZG9kQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJQ2dwSUQwK0lIUm9hWE11WTJ4cFkydGxaQ2d4S1NrN1hHNGdJQ0FnSUNBZ0lFSlZVeTVzYVhOMFpXNG9KMkoxYkd4bGREcGpiR2xqYTJWa0p5d2dkR2hwY3k1amJHbGphMlZrTENCMGFHbHpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCZFNCamJHbGpJSE4xY2lCMWJtVWdabXpEcUdOb1pTQnZkU0IxYm1VZ1luVnNiR1VzSUc5dUlHeGhibU5sSUd3bllXNXBiV0YwYVc5dUlHUmxjeUJ6Ykdsa1pYTXVYRzRnSUNBZ0lDb2dRSEJoY21GdElHUnBjbVZqZEdsdmJseHVJQ0FnSUNBcUwxeHVJQ0FnSUdOc2FXTnJaV1FvWkdseVpXTjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6WlhGMVpXNWpaU0E5SUc1bGR5QlVhVzFsYkdsdVpVMWhlQ2dwTzF4dUlDQWdJQ0FnSUNCc1pYUWdjMnhwWkdWRmJDQTlJSFJvYVhNdWMyeHBaR1Z6VzNSb2FYTXVZM1Z5Y21WdWRFbHVaR1Y0WFM1bGJEdGNiaUFnSUNBZ0lDQWdiR1YwSUdsdFlXZGxJRDBnYzJ4cFpHVkZiQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDZHBiV2NuS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1JsYzJOeWFYQjBhVzl1SUQwZ2MyeHBaR1ZGYkM1eGRXVnllVk5sYkdWamRHOXlLQ2N1WW1sclpWOWZaR1Z6WTNKcGNIUnBiMjRuS1R0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnYm1WNGRDQTlJQ2gwYUdsekxtTjFjbkpsYm5SSmJtUmxlQ0FySUdScGNtVmpkR2x2YmlBcklIUm9hWE11YzJ4cFpHVnpMbXhsYm1kMGFDa2dKU0IwYUdsekxuTnNhV1JsY3k1c1pXNW5kR2c3WEc0Z0lDQWdJQ0FnSUd4bGRDQmtJRDBnWkdseVpXTjBhVzl1TzF4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCTWIzSnpJR1FuZFc0Z1kyeHBZeUJ6ZFhJZ2RXNWxJR0oxYkd4bExDQnNaU0J3WVhKaGJjT29kSEpsSUdWemRDQmtaU0IwZVhCbElFMXZkWE5sUTJ4cFkydGxaQzRnUkdGdWN5QmpaU0JqWVhNc0lHOXVJR1REcVdacGJtbDBJR3hoSUdScGNtVmpkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0tpQnpaV3h2YmlCc1lTQnpiR2xrWlNCa1pTQmt3Nmx3WVhKMElHVjBJR05sYkd4bElHUW5ZWEp5YVhiRHFXVXVYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCcFppaGthWEpsWTNScGIyNGdhVzV6ZEdGdVkyVnZaaUJGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkQ0E5SUdScGNtVmpkR2x2Ymk1a1pYUmhhV3d1YVc1a1pYZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCa0lEMGdLSFJvYVhNdVkzVnljbVZ1ZEVsdVpHVjRJRHdnYm1WNGRDa2dQeUF4SURvZ0xURTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppaDBhR2x6TG1OMWNuSmxiblJKYm1SbGVDQWhQVDBnYm1WNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzVsZUhSVGJHbGtaU0E5SUhSb2FYTXVjMnhwWkdWelcyNWxlSFJkTG1Wc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbHRZV2RsVG1WNGRDQTlJRzVsZUhSVGJHbGtaUzV4ZFdWeWVWTmxiR1ZqZEc5eUtDZHBiV2NuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa1pYTmpjbWx3ZEdsdmJrNWxlSFFnUFNCdVpYaDBVMnhwWkdVdWNYVmxjbmxUWld4bFkzUnZjaWduTG1KcGEyVmZYMlJsYzJOeWFYQjBhVzl1SnlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNvZ1VHRnpJR1JsSUZOUVFVMGdJVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVlIzWldWdVRXRjRMbWx6VkhkbFpXNXBibWNvYVcxaFoyVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWeGRXVnVZMlV1YzJWMEtDY3VZbWxyWlY5ZmFXMWhaMlVuTENCN1ltRmphMlpoWTJWV2FYTnBZbWxzYVhSNU9pQmNJbWhwWkdSbGJsd2lmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYRjFaVzVqWlM1MGJ5aHBiV0ZuWlN3Z01DNDJMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZkR0YwYVc5dVdUb2dPVEFnS2lCa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I2T2lBek1EQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWaGMyVTZJRUpoWTJzdVpXRnpaVWx1TG1OdmJtWnBaeWd4TGpjcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2YmtOdmJYQnNaWFJsT2lBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFUyeHBaR1V1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbTVsZHkxaWFXdGxjMTlmWW1sclpTY3BMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMjVsZHkxaWFXdGxjMTlmWW1sclpTMHRhR2xrWkdWdUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlVWc0xuRjFaWEo1VTJWc1pXTjBiM0lvSnk1dVpYY3RZbWxyWlhOZlgySnBhMlVuS1M1amJHRnpjMHhwYzNRdVlXUmtLQ2R1WlhjdFltbHJaWE5mWDJKcGEyVXRMV2hwWkdSbGJpY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtVjJhV1YzVld3dWNYVmxjbmxUWld4bFkzUnZjaWduTG5CeVpYWnBaWGRmWDJsdFlXZGxMUzFoWTNScGRtVW5LUzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2R3Y21WMmFXVjNYMTlwYldGblpTMHRZV04wYVhabEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeVpYWnBaWGRWYkM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdWNISmxkbWxsZDE5ZmFXMWhaMlVuS1Z0dVpYaDBYUzVqYkdGemMweHBjM1F1WVdSa0tDZHdjbVYyYVdWM1gxOXBiV0ZuWlMwdFlXTjBhWFpsSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxjWFZsYm1ObExuUnZLR1JsYzJOeWFYQjBhVzl1TENBd0xqWXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQmhZMmwwZVRvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOaGJHVllPaUF3TGpVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bFdUb2dNQzQxTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxZWE5sT2lCQ1lXTnJMbVZoYzJWSmJpNWpiMjVtYVdjb01TNDNLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSUNjdFBUQXVOaWNwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnhkV1Z1WTJVdWMyVjBLR2x0WVdkbFRtVjRkQ3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliM1JoZEdsdmJsazZJRGt3SUNvZ0xURWdLaUJrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjZPaUF6TURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dNQzQxS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxjWFZsYm1ObExuTmxkQ2hrWlhOamNtbHdkR2x2Yms1bGVIUXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQmhZMmwwZVRvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOaGJHVllPaUF3TGpVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bFdUb2dNQzQxWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z01DNDFLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGNYVmxibU5sTG5SdktHbHRZV2RsVG1WNGRDd2dNQzQyTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2ZEdGMGFXOXVXVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlam9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV0Z6WlRvZ1FtRmpheTVsWVhObFQzVjBMbU52Ym1acFp5Z3hMamNwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZia052YlhCc1pYUmxPaUFvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiV0ZuWlM1emRIbHNaUzUwY21GdWMyWnZjbTBnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amRYSnlaVzUwU1c1a1pYZ2dQU0J1WlhoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWEYxWlc1alpTNTBieWhrWlhOamNtbHdkR2x2Yms1bGVIUXNJREF1Tml3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0dGamFYUjVPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlZnNklERXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOallXeGxXVG9nTVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV0Z6WlRvZ1FtRmpheTVsWVhObFQzVjBMbU52Ym1acFp5Z3hMamNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5MDlNQzQySnlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWEYxWlc1alpTNXdiR0Y1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUGJpQmpjc09wWlNCc1pTQmpiMjUwWlc1MUlFaFVUVXdnY0c5MWNpQmphR0Z4ZFdVZ2MyeHBaR1VzSUdGcGJuTnBJSEYxWlNCc1lTQmlkV3hzWlZ4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1JoZEdFZ1JHOXVic09wWlhNZ2NzT3BZM1Z3dzZseXc2bGxjeUJsYmlCQmFtRjRYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kzSmxZWFJsU0ZSTlRGTjBjblZqZEhWeVpTaGtZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lHUmhkR0V1Wm05eVJXRmphQ2dvWld4bGJXVnVkQ3dnYVc1a1pYZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyeHBaR1Z6VzJsdVpHVjRYU0E5SUc1bGR5QlRiR2xrWlhKSmRHVnRLR2x1WkdWNExDQmxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhWFJsYlZWc0xtRndjR1Z1WkVOb2FXeGtLSFJvYVhNdWMyeHBaR1Z6VzJsdVpHVjRYUzVqY21WaGRHVklWRTFNS0NrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHSjFiR3hsZENBOUlHNWxkeUJDZFd4c1pYUW9hVzVrWlhnc0lHVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbVYyYVdWM1ZXd3VZWEJ3Wlc1a1EyaHBiR1FvWW5Wc2JHVjBMbU55WldGMFpVaFVUVXdvS1NrN1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ2ZWeHVmU0lzSW1sdGNHOXlkQ0JDYVd0bFZHVnRjR3hoZEdVZ1puSnZiU0FuTGk0dmRHVnRjR3hoZEdWekwySnBhMlV0ZEdWdGNHeGhkR1VuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJDYVd0bElIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHBibVJsZUN3Z1pHRjBZU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1WkdWNElEMGdhVzVrWlhnN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlTQTlJR1JoZEdFN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTNKbFlYUmxTRlJOVENncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJDQTlJRUpwYTJWVVpXMXdiR0YwWlM1eVpXNWtaWElvZEdocGN5NWtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdGIzVnpaV1Z1ZEdWeUp5d2dLR1VwSUQwK0lIUm9hWE11Ylc5MlpTaGxLU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaV3d1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYlc5MWMyVnNaV0YyWlNjc0lDaGxLU0E5UGlCMGFHbHpMbkpsYzJWMEtHVXBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JXOTJaU2hsS1NCN1hHNGdJQ0FnSUNBZ0lGUjNaV1Z1VFdGNExuUnZLSFJvYVhNdVpXd3NJREF1TkN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJOaGJHVllPaUF4TGpFMUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJOaGJHVlpPaUF4TGpFMVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxjMlYwS0dVcElIdGNiaUFnSUNBZ0lDQWdWSGRsWlc1TllYZ3VkRzhvZEdocGN5NWxiQ3dnTUM0MExDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelkyRnNaVmc2SURFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WTJGc1pWazZJREZjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dWZTSXNJbWx0Y0c5eWRDQkNhV3RsSUdaeWIyMGdYQ0l1TDJKcGEyVmNJanRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVMjl5ZENCN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc0lEMGdaV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aWFXdGxjeUE5SUZ0ZE8xeHVYRzRnSUNBZ0lDQWdJR2xtS0hSb2FYTXVaV3d1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbUpsYzNSelpXeHNaWEpmWDNObFlYSmphQ2NwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXRnlZMmhKYm5CMWRDQTlJSFJvYVhNdVpXd3VjWFZsY25sVFpXeGxZM1J2Y2lnbkxtSmxjM1J6Wld4c1pYSmZYM05sWVhKamFDY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeHZZV1JEYjI1MFpXNTBLSFZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY21WeElEMGdibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBLQ2s3WEc0Z0lDQWdJQ0FnSUhKbGNTNXZjR1Z1S0NkSFJWUW5MQ0IxY213c0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNCeVpYRXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25jbVZoWkhsemRHRjBaV05vWVc1blpTY3NJQ2dwSUQwK0lIUm9hWE11Ykc5aFpHVmtLSEpsY1NrcE8xeHVJQ0FnSUNBZ0lDQnlaWEV1YzJWdVpDZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeHZZV1JsWkNoeVpYRXBJSHRjYmlBZ0lDQWdJQ0FnYVdZb2NtVnhMbkpsWVdSNVUzUmhkR1VnUFQwZ1dFMU1TSFIwY0ZKbGNYVmxjM1F1UkU5T1JTQW1KaUJ5WlhFdWMzUmhkSFZ6SUQwOUlESXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZJVkUxTVUzUnlkV04wZFhKbEtFcFRUMDR1Y0dGeWMyVW9jbVZ4TG5KbGMzQnZibk5sVkdWNGRDa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZM0psWVhSbFNGUk5URk4wY25WamRIVnlaU2hrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJR1JoZEdFdVptOXlSV0ZqYUNnb1pXeGxiV1Z1ZEN3Z2FXNWtaWGdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmlhV3RsSUQwZ2JtVjNJRUpwYTJVb2FXNWtaWGdzSUdWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aWFXdGxjeTV3ZFhOb0tHSnBhMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJDNXhkV1Z5ZVZObGJHVmpkRzl5S0NkMWJDNWlaWE4wYzJWc2JHVnljeTFzYVhOMEp5a3VZWEJ3Wlc1a1EyaHBiR1FvWW1sclpTNWpjbVZoZEdWSVZFMU1LQ2twTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxteHBjM1JsYmlncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4cGMzUmxiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkM1eGRXVnllVk5sYkdWamRHOXlLQ2RtYjNKdExtSmxjM1J6Wld4c1pYSnpYMTltYjNKdElITmxiR1ZqZENjcExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTm9ZVzVuWlNjc0lDZ3BJRDArSUhSb2FYTXVjMlZzWldOMFEyaGhibWRsWkNncEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmloMGFHbHpMbk5sWVhKamFFbHVjSFYwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXRnlZMmhKYm5CMWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHBibkIxZENjc0lDZ3BJRDArSUhSb2FYTXVjMlZoY21Ob1EyaGhibWRsWkNncEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCelpXRnlZMmhEYUdGdVoyVmtLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdiR2x6ZENBOUlIUm9hWE11Wld3dWNYVmxjbmxUWld4bFkzUnZjaWduZFd3dVltVnpkSE5sYkd4bGNuTXRiR2x6ZENjcE8xeHVYRzRnSUNBZ0lDQWdJRlIzWldWdVRXRjRMblJ2S0d4cGMzUXNJREF1TlN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVd4d2FHRTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia052YlhCc1pYUmxPaUFvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR2x6ZEM1cGJtNWxja2hVVFV3Z1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVpYVd0bGN5NW1iM0pGWVdOb0tDaGxiR1Z0Wlc1MEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1LR1ZzWlcxbGJuUXVaV3d1YVc1dVpYSklWRTFNTG5SdlRHOTNaWEpEWVhObEtDa3VhVzVrWlhoUFppaDBhR2x6TG5ObFlYSmphRWx1Y0hWMExuWmhiSFZsTG5SdlRHOTNaWEpEWVhObEtDa3BJRDRnTFRFcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBMbUZ3Y0dWdVpFTm9hV3hrS0dWc1pXMWxiblF1Wld3cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVkhkbFpXNU5ZWGd1ZEc4b2JHbHpkQ3dnTUM0MUxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGc2NHaGhPaUF4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhObGJHVmpkRU5vWVc1blpXUW9LU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnNhWE4wSUQwZ2RHaHBjeTVsYkM1eGRXVnllVk5sYkdWamRHOXlLQ2QxYkM1aVpYTjBjMlZzYkdWeWN5MXNhWE4wSnlrN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUhOdmNuUmxjaUE5SUZ3aVpHRjBZUzFjSWlBcklIUm9hWE11Wld3dWNYVmxjbmxUWld4bFkzUnZjaWduWm05eWJTNWlaWE4wYzJWc2JHVnljMTlmWm05eWJTQnpaV3hsWTNRbktTNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2JHVjBJR0pwYTJWeklEMGdXMTB1YzJ4cFkyVXVZMkZzYkNoMGFHbHpMbVZzTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk1aVpYTjBjMlZzYkdWeWN5MXNhWE4wWDE5c2FTY3BLVHRjYmx4dUlDQWdJQ0FnSUNCaWFXdGxjeTV6YjNKMEtDaGhMQ0JpS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVM1blpYUkJkSFJ5YVdKMWRHVW9jMjl5ZEdWeUtTQStJR0l1WjJWMFFYUjBjbWxpZFhSbEtITnZjblJsY2lrZ1B5QXhJRG9nTFRFN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUZSM1pXVnVUV0Y0TG5SdktHeHBjM1FzSURBdU5Td2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXeHdhR0U2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOdmJYQnNaWFJsT2lBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdsemRDNXBibTVsY2toVVRVd2dQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbWxyWlhNdVptOXlSV0ZqYUNnb1pXeGxiV1Z1ZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBMbUZ3Y0dWdVpFTm9hV3hrS0dWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWSGRsWlc1TllYZ3VkRzhvYkdsemRDd2dNQzQxTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZzY0doaE9pQXhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYm4waUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJDYVd0bFZHVnRjR3hoZEdVZ2UxeHVJQ0FnSUhOMFlYUnBZeUJ5Wlc1a1pYSW9aR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYUhSdGJDQTlJR0JjYmlBZ0lDQWdJQ0FnSUNBZ0lEeHNhU0JqYkdGemN6MWNJbUpsYzNSelpXeHNaWEp6TFd4cGMzUmZYMnhwWENJZ1pHRjBZUzF3Y21salpUMWNJaVI3WkdGMFlTNXdjbWxqWlgxY0lpQmtZWFJoTFc1aGJXVTlYQ0lrZTJSaGRHRXVkR2wwYkdWOVhDSWdKSHRjSW5OMGIyTnJYQ0lnYVc0Z1pHRjBZU0EvSUZ3aVpHRjBZUzF6ZEc5amF6MWNYRndpWENJZ0t5QmtZWFJoTG5OMGIyTnJJQ3NnWENKY1hGd2lYQ0lnT2lCdWRXeHNmU0FrZTF3aWNHOXdkV3hoY21sMGVWd2lJR2x1SUdSaGRHRWdQeUJjSW1SaGRHRXRjRzl3ZFd4aGNtbDBlVDFjWEZ3aVhDSWdLeUJrWVhSaExuQnZjSFZzWVhKcGRIa2dLeUJjSWx4Y1hDSmNJaUE2SUc1MWJHeDlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhoY25ScFkyeGxJR05zWVhOelBWd2lZbVZ6ZEhObGJHeGxjaUFrZTJSaGRHRXVjM1J2WTJzZ1BDQXpJRDhnWENKaVpYTjBjMlZzYkdWeUxTMWtZVzVuWlhKY0lpQTZJQ2NuZlZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WVNCb2NtVm1QVndpSTF3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbUpsYzNSelpXeHNaWEpmWDJsdFlXZGxYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHbHRaeUJ6Y21NOVhDSWtlMlJoZEdFdWFXMWhaMlY5WENJZ1lXeDBQVndpU1cxaFoyVWdaR1VnZHNPcGJHOWNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBpQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeG9NU0JqYkdGemN6MWNJbUpsYzNSelpXeHNaWEpmWDNScGRHeGxYQ0krSkh0a1lYUmhMblJwZEd4bGZUd3ZhREUrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0NCamJHRnpjejFjSW1KbGMzUnpaV3hzWlhKZlgyUmxjMk55YVhCMGFXOXVYQ0krSkh0a1lYUmhMbVJsYzJOeWFYQjBhVzl1ZlR3dmNENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0ppWlhOMGMyVnNiR1Z5TFdadmIzUmxjbHdpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdJR05zWVhOelBWd2lZbVZ6ZEhObGJHeGxjaTFtYjI5MFpYSmZYM04wYjJOclhDSStKSHRrWVhSaExuTjBiMk5yZlNCbGJpQnpkRzlqYXp3dmNENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aVltVnpkSE5sYkd4bGNpMW1iMjkwWlhKZlgySmhjbHdpUGp3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WVQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyRnlkR2xqYkdVK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDJ4cFBseHVJQ0FnSUNBZ0lDQmdPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQjBaVzF3YkdGMFpTQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTzF4dUlDQWdJQ0FnSUNCMFpXMXdiR0YwWlM1cGJtNWxja2hVVFV3Z1BTQm9kRzFzTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdWdGNHeGhkR1V1WTJocGJHUk9iMlJsYzFzeFhUdGNiaUFnSUNCOVhHNTlJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1FuVnNiR1YwVkdWdGNHeGhkR1VnZTF4dUlDQWdJSE4wWVhScFl5QnlaVzVrWlhJb1pHRjBZU2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdhSFJ0YkNBOUlHQmNiaUFnSUNBZ0lDQWdJQ0FnSUR4c2FTQmpiR0Z6Y3oxY0luQnlaWFpwWlhkZlgyeHBYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdFZ2FISmxaajFjSWlOY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0luQnlaWFpwWlhkZlgybHRZV2RsSUNSN1pHRjBZUzVwYm1SbGVDQTlQVDBnTUNBL0lGd2ljSEpsZG1sbGQxOWZhVzFoWjJVdExXRmpkR2wyWlZ3aUlEb2diblZzYkgwZ2NISmxkbWxsZDE5ZmFXMWhaMlV0TFdsdFlXZGxMU1I3WkdGMFlTNXBibVJsZUNBcklERjlYQ0krUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzloUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlzYVQ1Y2JpQWdJQ0FnSUNBZ1lEdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2RHVnRjR3hoZEdVZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nka2FYWW5LVHRjYmlBZ0lDQWdJQ0FnZEdWdGNHeGhkR1V1YVc1dVpYSklWRTFNSUQwZ2FIUnRiRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJsYlhCc1lYUmxMbU5vYVd4a1RtOWtaWE5iTVYwN1hHNGdJQ0FnZlZ4dWZTSXNJbVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZOc2FXUmxjbFJsYlhCc1lYUmxJSHRjYmlBZ0lDQnpkR0YwYVdNZ2NtVnVaR1Z5S0dSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHaDBiV3dnUFNCZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4YkdrK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHRnlkR2xqYkdVZ1kyeGhjM005WENKdVpYY3RZbWxyWlhOZlgySnBhMlVrZTJSaGRHRXVhVzVrWlhnZ1BUMGdNQ0EvSUNjbklEb2dYQ0lnYm1WM0xXSnBhMlZ6WDE5aWFXdGxMUzFvYVdSa1pXNWNJbjFjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW1KcGEyVmZYMmx0WVdkbElHSnBhMlZmWDJsdFlXZGxMUzF3Y21WMmFXVjNKSHRrWVhSaExtbHVaR1Y0SUNzZ01YMWNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhwYldjZ2MzSmpQVndpSkh0a1lYUmhMbWx0WVdkbGZWd2lJR0ZzZEQxY0lrbHRZV2RsSUdRbmRXNWxJSE5sYkd4bElHUmxJSGJEcVd4dlhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2lZbWxyWlY5ZlpHVnpZM0pwY0hScGIyNWNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhvTVNCamJHRnpjejFjSW1KcGEyVmZYM1JwZEd4bFhDSStKSHRrWVhSaExuUnBkR3hsZlR3dmFERStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjQ0JqYkdGemN6MWNJbUpwYTJWZlgzUmxlSFJjSWo0a2UyUmhkR0V1WkdWelkzSnBjSFJwYjI1OVBDOXdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0VnYUhKbFpqMWNJaVI3WkdGMFlTNTFjbXg5WENJZ1kyeGhjM005WENKaWRHNGdZbWxyWlY5ZlluUnVYQ0krWTI5dGJXRnVaR1Z5SUR4emNHRnVJR05zWVhOelBWd2lZMkZ5WlhRZ1kyRnlaWFF0Y21sbmFIUWdZbWxyWlY5ZlkyRnlaWFJjSWo0OEwzTndZVzQrUEM5aFBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMkZ5ZEdsamJHVStYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwyeHBQbHh1SUNBZ0lDQWdJQ0JnTzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0IwWlcxd2JHRjBaU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHVJQ0FnSUNBZ0lDQjBaVzF3YkdGMFpTNXBibTVsY2toVVRVd2dQU0JvZEcxc08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHVnRjR3hoZEdVdVkyaHBiR1JPYjJSbGMxc3hYVHRjYmlBZ0lDQjlYRzU5SWwxOVxuIl19
