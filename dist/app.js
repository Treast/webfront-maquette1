!function e(t,n,i){function r(a,s){if(!n[a]){if(!t[a]){var o="function"==typeof require&&require;if(!s&&o)return o(a,!0);if(l)return l(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[a]={exports:{}};t[a][0].call(u.exports,function(e){var n=t[a][1][e];return r(n||e)},u,u.exports,e,t,n,i)}return n[a].exports}for(var l="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(){function e(t){i(this,e),this.el=t,this.config=this.config(),this.ctx=this.el.getContext("2d")}return r(e,[{key:"init",value:function(){this.ctx.lineWidth=1,this.ctx.fillStyle=this.config.canvas.color,this.ctx.fillRect(0,0,this.el.width,this.el.height),this.ctx.save()}},{key:"config",value:function(){return{canvas:{color:"#ff3f0c"},circle:{radius:4.5,color:"#0cff54"},square:{length:8,color:"#ffffff"},triangle:{length:9,color:"#170cff"},axis:{stroke:"rgba(255, 255, 255, 0.3)"},text:{font:"bold 12px Arial",color:"#ffffff"},legend:{font:"9.5px Arial",color:"#ffffff"}}}},{key:"drawCircle",value:function(e,t){this.ctx.beginPath(),this.ctx.arc(e,t,this.config.circle.radius,0,2*Math.PI),this.ctx.fillStyle=this.config.circle.color,this.ctx.fill()}},{key:"drawSquare",value:function(e,t){this.ctx.beginPath(),this.ctx.moveTo(e,t),this.ctx.lineTo(e+this.config.square.length,t),this.ctx.lineTo(e+this.config.square.length,t+this.config.square.length),this.ctx.lineTo(e,t+this.config.square.length),this.ctx.closePath(),this.ctx.fillStyle=this.config.square.color,this.ctx.fill()}},{key:"drawTriangle",value:function(e,t){this.ctx.beginPath(),this.ctx.moveTo(e,t),this.ctx.lineTo(e+this.config.triangle.length,t),this.ctx.lineTo(e+this.config.triangle.length/2,t-Math.sqrt(3)*this.config.triangle.length/2),this.ctx.closePath(),this.ctx.fillStyle=this.config.triangle.color,this.ctx.fill()}},{key:"drawAxis",value:function(){var e=0;this.ctx.strokeStyle=this.config.axis.stroke;for(var t=0;t<7;t++)e+=30,this.ctx.beginPath(),this.ctx.moveTo(0,e),this.ctx.lineWidth=1,this.ctx.lineTo(this.el.width,e),this.ctx.stroke()}},{key:"drawText",value:function(e,t){this.ctx.font=this.config.text.font,this.ctx.fillStyle=this.config.text.color,this.ctx.fillText(t,e,241)}},{key:"drawSmallText",value:function(e,t){this.ctx.font=this.config.legend.font,this.ctx.fillStyle=this.config.legend.color,this.ctx.fillText(t,e,294)}},{key:"drawCurve",value:function(){this.ctx.beginPath(),this.ctx.moveTo(111,82),this.ctx.quadraticCurveTo(183,21,248,34),this.ctx.quadraticCurveTo(283,37,336,114),this.ctx.quadraticCurveTo(420,230,481,148),this.ctx.quadraticCurveTo(566,39,657,142),this.ctx.lineTo(709,179),this.ctx.lineTo(709,210),this.ctx.lineTo(111,210),this.ctx.closePath(),this.ctx.moveTo(111,82);var e=this.ctx.createLinearGradient(0,0,598,0);e.addColorStop(0,"#ff3f0c"),e.addColorStop(.08,"#d8350a"),e.addColorStop(.91,"#d8350a"),e.addColorStop(1,"#ff3f0c"),this.ctx.fillStyle=e,this.ctx.translate(111,82),this.ctx.fill()}},{key:"render",value:function(){this.init(),this.drawCurve(),this.ctx.restore(),this.drawCircle(106,182),this.drawCircle(260,123),this.drawCircle(413,62),this.drawCircle(327,290),this.drawCircle(568,122),this.drawCircle(723,92),this.drawTriangle(256,96),this.drawTriangle(384,294),this.drawTriangle(564,67),this.drawText(82,"octobre"),this.drawText(231,"novembre"),this.drawText(389,"décembre"),this.drawText(549,"janvier"),this.drawText(705,"février"),this.drawSquare(469,286),this.drawSmallText(337,"ventes"),this.drawSmallText(398,"commandes"),this.drawSmallText(482,"stock"),this.drawAxis()}}]),e}();n.default=l},{}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={el:document.createElement("div"),dispatch:function(e,t){var n=new CustomEvent(e,{detail:t||{}});this.el.dispatchEvent(n)},listen:function(e,t,n){this.el.addEventListener(e,t.bind(n))}}},{}],3:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}var r=i(e("./slider/slider")),l=i(e("./sort/sort")),a=i(e("./chart/chart"));new r.default(document.querySelector(".new-bikes__container")).loadContent(),new l.default(document.querySelector("section.bestsellers")).loadContent("./api/bestsellers.json"),new l.default(document.querySelector("section.all-bikes")).loadContent("./api/all-modeles.json"),new a.default(document.querySelector("section.charts canvas")).render();var s=document.querySelector("header"),o=s.querySelector("header .header__burger"),c=document.querySelector(".overlay");o.addEventListener("click",function(){s.classList.add("header__opened"),c.style.display="block",document.querySelector("body").style.overflowY="hidden",TweenMax.to(s.querySelector(".header__navs"),.4,{x:0}),TweenMax.to(c,.4,{alpha:.8})}),c.addEventListener("click",function(){s.classList.remove("header__opened"),TweenMax.to(s.querySelector(".header__navs"),.4,{x:-1*s.getBoundingClientRect().width}),TweenMax.to(document.querySelector(".overlay"),.4,{alpha:0,onComplete:function(){c.style.display="none",document.querySelector("body").style.overflowY="auto"}})})},{"./chart/chart":1,"./slider/slider":6,"./sort/sort":8}],4:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=i(e("../core/BUS")),s=i(e("../templates/bullet-template")),o=function(){function e(t,n){r(this,e),this.index=t,this.data=n}return l(e,[{key:"createHTML",value:function(){var e=this;return this.el=s.default.render({index:this.index}),this.el.addEventListener("click",function(t){return e.clicked(t)}),this.el}},{key:"clicked",value:function(e){e.preventDefault(),a.default.dispatch("bullet:clicked",{el:this.el,index:this.index})}}]),e}();n.default=o},{"../core/BUS":2,"../templates/bullet-template":10}],5:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(e){return e&&e.__esModule?e:{default:e}}(e("../templates/slide-template")),a=function(){function e(t,n){i(this,e),this.index=t,this.data=n}return r(e,[{key:"createHTML",value:function(){return this.el=l.default.render(Object.assign({index:this.index},this.data)),this.el}}]),e}();n.default=a},{"../templates/slide-template":11}],6:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=i(e("../core/BUS")),s=i(e("./slider-item")),o=i(e("./bullet")),c=function(){function e(t){r(this,e),this.el=t,this.slides=[],this.currentIndex=0,this.init()}return l(e,[{key:"init",value:function(){this.previewUl=this.el.querySelector(".preview__ul"),this.itemUl=this.el.querySelector(".new-bikes__ul"),this.left=this.el.querySelector(".new-bikes__arrows--previous"),this.right=this.el.querySelector(".new-bikes__arrows--next"),this.listen()}},{key:"loadContent",value:function(){var e=this,t=new XMLHttpRequest;t.open("GET","./api/slides.json",!0),t.addEventListener("readystatechange",function(){return e.loaded(t)}),t.send()}},{key:"loaded",value:function(e){e.readyState==XMLHttpRequest.DONE&&200==e.status&&this.createHTMLStructure(JSON.parse(e.responseText))}},{key:"listen",value:function(){var e=this;this.left.addEventListener("click",function(){return e.clicked(-1)}),this.right.addEventListener("click",function(){return e.clicked(1)}),a.default.listen("bullet:clicked",this.clicked,this)}},{key:"clicked",value:function(e){var t=this,n=new TimelineMax,i=this.slides[this.currentIndex].el,r=i.querySelector("img"),l=i.querySelector(".bike__description"),a=(this.currentIndex+e+this.slides.length)%this.slides.length,s=e;if(e instanceof Event&&(a=e.detail.index,s=this.currentIndex<a?1:-1),this.currentIndex!==a){var o=this.slides[a].el,c=o.querySelector("img"),u=o.querySelector(".bike__description");TweenMax.isTweening(r)||(n.set(".bike__image",{backfaceVisibility:"hidden"}),n.to(r,.6,{rotationY:90*s,z:300,ease:Back.easeIn.config(1.7),onComplete:function(){o.querySelector(".new-bikes__bike").classList.remove("new-bikes__bike--hidden"),i.querySelector(".new-bikes__bike").classList.add("new-bikes__bike--hidden"),t.previewUl.querySelector(".preview__image--active").classList.remove("preview__image--active"),t.previewUl.querySelectorAll(".preview__image")[a].classList.add("preview__image--active")}}),n.to(l,.6,{opacity:0,scaleX:.5,scaleY:.5,ease:Back.easeIn.config(1.7)},"-=0.6"),n.set(c,{rotationY:-90*s,z:300},.5),n.set(u,{opacity:0,scaleX:.5,scaleY:.5},.5),n.to(c,.6,{rotationY:0,z:0,ease:Back.easeOut.config(1.7),onComplete:function(){r.style.transform=null,t.currentIndex=a}}),n.to(u,.6,{opacity:1,scaleX:1,scaleY:1,ease:Back.easeOut.config(1.7)},"-=0.6"),n.play())}}},{key:"createHTMLStructure",value:function(e){var t=this;e.forEach(function(e,n){t.slides[n]=new s.default(n,e),t.itemUl.appendChild(t.slides[n].createHTML());var i=new o.default(n,e);t.previewUl.appendChild(i.createHTML())})}}]),e}();n.default=c},{"../core/BUS":2,"./bullet":4,"./slider-item":5}],7:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(e){return e&&e.__esModule?e:{default:e}}(e("../templates/bike-template")),a=function(){function e(t,n){i(this,e),this.index=t,this.data=n}return r(e,[{key:"createHTML",value:function(){var e=this;return this.el=l.default.render(this.data),this.el.addEventListener("mouseenter",function(t){return e.move(t)}),this.el.addEventListener("mouseleave",function(t){return e.reset(t)}),this.el}},{key:"move",value:function(e){TweenMax.to(this.el,.4,{scaleX:1.05,scaleY:1.05})}},{key:"reset",value:function(e){TweenMax.to(this.el,.4,{scaleX:1,scaleY:1})}}]),e}();n.default=a},{"../templates/bike-template":9}],8:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(e){return e&&e.__esModule?e:{default:e}}(e("./bike")),a=function(){function e(t){i(this,e),this.el=t,this.bikes=[],this.el.querySelector(".bestseller__search")&&(this.searchInput=this.el.querySelector(".bestseller__search"))}return r(e,[{key:"loadContent",value:function(e){var t=this,n=new XMLHttpRequest;n.open("GET",e,!0),n.addEventListener("readystatechange",function(){return t.loaded(n)}),n.send()}},{key:"loaded",value:function(e){e.readyState==XMLHttpRequest.DONE&&200==e.status&&this.createHTMLStructure(JSON.parse(e.responseText))}},{key:"createHTMLStructure",value:function(e){var t=this;e.forEach(function(e,n){var i=new l.default(n,e);t.bikes.push(i),t.el.querySelector("ul.bestsellers-list").appendChild(i.createHTML())}),this.listen()}},{key:"listen",value:function(){var e=this;this.el.querySelector("form.bestsellers__form select").addEventListener("change",function(){return e.selectChanged()}),this.searchInput&&this.searchInput.addEventListener("input",function(){return e.searchChanged()})}},{key:"searchChanged",value:function(){var e=this,t=this.el.querySelector("ul.bestsellers-list");TweenMax.to(t,.5,{alpha:0,onComplete:function(){t.innerHTML=null,e.bikes.forEach(function(n){n.el.innerHTML.toLowerCase().indexOf(e.searchInput.value.toLowerCase())>-1&&t.appendChild(n.el)}),TweenMax.to(t,.5,{alpha:1})}})}},{key:"selectChanged",value:function(){var e=this.el.querySelector("ul.bestsellers-list"),t="data-"+this.el.querySelector("form.bestsellers__form select").value,n=[].slice.call(this.el.querySelectorAll(".bestsellers-list__li"));n.sort(function(e,n){return e.getAttribute(t)>n.getAttribute(t)?1:-1}),TweenMax.to(e,.5,{alpha:0,onComplete:function(){e.innerHTML=null,n.forEach(function(t){e.appendChild(t)}),TweenMax.to(e,.5,{alpha:1})}})}}]),e}();n.default=a},{"./bike":7}],9:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(){function e(){i(this,e)}return r(e,null,[{key:"render",value:function(e){var t='\n            <li class="bestsellers-list__li" data-price="'+e.price+'" data-name="'+e.title+'" '+("stock"in e?'data-stock="'+e.stock+'"':null)+" "+("popularity"in e?'data-popularity="'+e.popularity+'"':null)+'>\n                <article class="bestseller '+(e.stock<3?"bestseller--danger":"")+'">\n                    <a href="#">\n                        <div class="bestseller__image">\n                            <img src="'+e.image+'" alt="Image de vélo">\n                        </div> \n                        <h1 class="bestseller__title">'+e.title+'</h1>\n                        <p class="bestseller__description">'+e.description+'</p>\n                        <div class="bestseller-footer">\n                            <p class="bestseller-footer__stock">'+e.stock+' en stock</p>\n                            <div class="bestseller-footer__bar"></div>\n                        </div>\n                    </a>\n                </article>\n            </li>\n        ',n=document.createElement("div");return n.innerHTML=t,n.childNodes[1]}}]),e}();n.default=l},{}],10:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(){function e(){i(this,e)}return r(e,null,[{key:"render",value:function(e){var t='\n            <li class="preview__li">\n                <a href="#">\n                    <div class="preview__image '+(0===e.index?"preview__image--active":null)+" preview__image--image-"+(e.index+1)+'"></div>\n                </a>\n            </li>\n        ',n=document.createElement("div");return n.innerHTML=t,n.childNodes[1]}}]),e}();n.default=l},{}],11:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function(){function e(){i(this,e)}return r(e,null,[{key:"render",value:function(e){var t='\n            <li>\n                <article class="new-bikes__bike'+(0==e.index?"":" new-bikes__bike--hidden")+'">\n                    <div class="bike__image bike__image--preview'+(e.index+1)+'">\n                        <img src="'+e.image+'" alt="Image d\'une selle de vélo">\n                    </div>\n                    <div class="bike__description">\n                        <h1 class="bike__title">'+e.title+'</h1>\n                        <p class="bike__text">'+e.description+'</p>\n                        <a href="'+e.url+'" class="btn bike__btn">commander <span class="caret caret-right bike__caret"></span></a>\n                    </div>\n                </article>\n            </li>\n        ',n=document.createElement("div");return n.innerHTML=t,n.childNodes[1]}}]),e}();n.default=l},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
